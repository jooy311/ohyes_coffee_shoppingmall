
<!-- saved from url=(0842)https://www.mediacategory.com/mediaCategory/js/mobAdverSSL.html?q=JTdCJTIydXJsJTIyJTNBJTIyaHR0cHMlM0ElMkYlMkZsb2cubWVkaWFjYXRlZ29yeS5jb20lMkZzZXJ2bGV0JTJGcmYlM0YlMjIlMkMlMjJzZW5kVHlwZSUyMiUzQSUyMkRFRkFVTFQlMjIlMkMlMjJzZW5kVHlwZU9wdGlvbiUyMiUzQW51bGwlMkMlMjJtZXRob2QlMjIlM0ElMjJHRVQlMjIlMkMlMjJkYXRhVHlwZSUyMiUzQSUyMlFVRVJZJTIyJTJDJTIyZGF0YSUyMiUzQSUyMnVzZXJpZCUzRGNvZmZlZWNob2klMjZmb3JtJTNEaHR0cCUyNTNBJTI1MkYlMjUyRmNvZmZlZWNob2kuY28ua3IlMjUyRnByb2R1Y3QlMjUyRiUyNTI1RUIlMjUyNUI4JTI1MjU4QyUyNTI1RUIlMjUyNTlEJTI1MjVCQyUyNTI1RUMlMjUyNUE3JTI1MjU4OC1ueTItMTAwZyUyNTJGMjQlMjUyRmNhdGVnb3J5JTI1MkY0NiUyNTJGZGlzcGxheSUyNTJGMSUyNTJGJTI2dXJsJTNEaHR0cCUyNTNBJTI1MkYlMjUyRmNvZmZlZWNob2kuY28ua3IlMjUyRm9yZGVyJTI1MkZiYXNrZXQuaHRtbCUyNnJkVHlwZSUzRFJGJTI2YWR0bW9kZSUzRDElMjIlMkMlMjJhcHBlbmRQYXJhbSUyMiUzQSU1QiUyMnNfYXVfaWQlMjIlMkMlMjJzX0lQX2luZm8lMjIlNUQlN0Q= -->
<html lang="ko"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <title></title>
</head>
<body>
<script type="text/javascript">
    window.onload = function () {
        var search = window.location.search;
        _SEND(search);
    };

    function _SEND(search) {
        var q = decodeURIComponent(atob(decodeURI(getParameter(search, 'q'), 2)));
        var rawData = JSON.parse(q);
        // console.log(JSON.stringify(rawData));
        var data = appendClientData(rawData.sendType, rawData.data, rawData.appendParam);
        // console.log("data :: " + typeof data === 'object' ? JSON.stringify(data) : data);
        send(rawData.sendType, rawData.dataType, rawData.method, rawData.url, data, rawData.sendTypeOption);
    }

    function decodeURI(encodedString, encodedCount) {
        var decodedString = encodedString;
        if (typeof encodedCount === 'number') {
            for (var i = 0; i < encodedCount; i++) {
                decodedString = decodeURIComponent(decodedString)
            }
        }
        return decodedString;
    }

    function getParameter(search, paramName) {
        if (search.length > 0) {
            search = search.slice(1, search.length);
        }
        var params = search.split('&');
        for (var i = 0; i < params.length; i++) {
            var param = params[i].split('=');
            var name = param[0];
            var value = param[1];
            if (name === paramName && value.length > 0) {
                return value;
            }
        }
    }

    function send(sendType, dataType, method, url, data, sendTypeOption) {
        if (sendType === 'DEFAULT' && dataType === 'QUERY') {
            (new Image).src = url + data;
        } else if (sendType === 'AJAX' && dataType === 'JSON') {
            // console.log(`data=${JSON.stringify(data)}`);
            var xhr = new XMLHttpRequest();
            xhr.timeout = sendTypeOption.timeout;
            xhr.open(method, url, true);
            xhr.withCredentials = sendTypeOption.withCredentials;
            xhrSend(xhr, method, data, sendTypeOption);
        }
    }

    function hasXhrTransmitted(method, xhrStatus) {
        switch (method) {
            case 'GET':
                return xhrStatus === 200;
            case 'POST':
                return xhrStatus === 200 || xhrStatus === 201;
            case 'PUT':
                throw new Error('PUT method');
            case 'DELETE':
                throw new Error('DELETE method');
            default:
                throw new Error('Invalid HTTP method type or not supported yet.');
        }
    }

    function getItemFromCookie(type) {
        if (type === 's_au_id' && getCookie('s_au_id')) {
            return getCookie('s_au_id');
        } else if (type === 's_IP_info' && getCookie('s_IP_info')) {
            return getCookie('s_IP_info');
        }
        return null;
    }

    function getItemFromStorage(type) {
        var localStorage = window.localStorage;
        var rtnData = null;
        if (type === 's_au_id') {
            if (localStorage.getItem('au_id') != null) {
                rtnData = localStorage.getItem('au_id');
            } else {
                // API 호출
            }
        } else if (type === 's_IP_info') {
            if (localStorage.getItem('IP_info') != null) {
                rtnData = localStorage.getItem('IP_info');
            } else {
                // API 호출
            }
        }
        return rtnData;
    }

    function getCookie(key) {
        var cookieValue = null;
        var rawCookie = document.cookie.split(';');
        rawCookie.some(function (item) {
            // 공백을 제거
            item = item.replace(' ', '');
            var cookiePair = item.split('=');
            if (key === cookiePair[0]) {
                cookieValue = cookiePair[1];
                return true;    // break;
            }
        });
        return cookieValue;
    }

    function xhrSend(xhr, method, jsonData, sendTypeOption) {
        const callbackListener = () => {
            let hasTransmitted = false; /* 데이터 전송완료 여부 */
            switch (xhr.readyState) {
                case xhr.UNSENT:
                    /* open() has not been called yet. Request not initialized. */
                    break;
                case xhr.OPENED:
                    /* open() has been called. Server connection established. */
                    break;
                case xhr.HEADERS_RECEIVED:
                    /* send() has been called, and headers and status are available. */
                    break;
                case xhr.LOADING:
                    /* Processing request. */
                    break;
                case xhr.DONE:
                    /* Request finished and response is ready. */
                    hasTransmitted = hasXhrTransmitted(method, xhr.status);
                    if (sendTypeOption.callback) {
                        sendTypeOption.callback(xhr, xhr.response, hasTransmitted);
                    }
                    break;
                default:
                    break;
            }
        };
        if (sendTypeOption.setHeader) {
            var headers = sendTypeOption.headers;
            for (var header in headers) {
                xhr.setRequestHeader(headers[header].name, headers[header].value);
            }
        }
        xhr.onreadystatechange = callbackListener;
        xhr.send(JSON.stringify(jsonData));
    }

    function appendClientData(sendType, data, appendParam) {
        appendParam.forEach((paramName) => {
            // console.log(paramName);
            var cookieValue = getItemFromCookie(paramName);
            if (cookieValue != null) {
                // console.log("getItemFromCookie data..");
                data = getAppendedData(sendType, data, paramName, cookieValue);
            } else {
                var storageValue = getItemFromStorage(paramName);
                if (storageValue != null) {
                    // console.log("getItemFromStorage data..");
                    data = getAppendedData(sendType, data, paramName, storageValue);
                }
            }

        });
        return data;
    }
    function getAppendedData(sendType, data, paramName, paramValue) {
        if (sendType === 'DEFAULT') {
            data += '&' + paramName + '=' + paramValue.split("\"").join("");
        } else if (sendType === 'AJAX') {
            data[createKey(paramName)] = paramValue.split("\"").join("");
        }
        return data;
    }
    function createKey(keyName) {
        switch (keyName) {
            case 's_au_id':
                return 'auId';
            case 's_IP_info':
                return 'ipInfo';
            default:
                return keyName;
        }
    }
</script>

</body></html>