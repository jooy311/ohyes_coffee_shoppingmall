/**
 * 앱 콜백용 js(front)
 */
// 요청 데이터
var oAppRequestData = {};
// 응답 데이터
var oAppResponseData = {};

// 앱할인 적용 데이터
var oAppDiscountData = {};


var AppCallback = {
    /**
     * 주문서 > app으로부터 받은 주소를 배송지주소로 세팅
     *
     * country_code : 국가코드
     * zipcode : 우편번호
     * state : 주도
     * city : 시군도시
     * detail : 상세
     * disable_flag : 주소비활성화처리여부(T:비활성화처리 함, T가 아니면 활성화처리 안함)
     */
    setShippingAddress : function(aData)
    {
        // app으로부터 받은 배송지 주소정보
        var aShippingAddressInfo = JSON.parse(aData);

        //배송지 주소 세팅
        EC_SHOP_FRONT_ORDERFORM_DISPLAY.form.setShippingAddressDisplay(aShippingAddressInfo);

        // app으로부터 받은 배송지 주소정보 - 로그기록
        var sLogName = 'AppCallback.setShippingAddress()';
        EC_SHOP_FRONT_ORDERFORM_COMMON.logAjaxCall(aData, sLogName);
    },

    /**
     * EC_ORDER_ORDERFORM_CHANGE - shipping_company 이벤트 콜백
     * response
     * shipping_available_flag : 선택된 배송사로 배송가능여부 ( true / false)
     * message : 배송불가능한 경우 사유
     */
    setCustomShippingCompany : function(response)
    {
        //배송가능여부
        var shipping_available_flag = response.shipping_available_flag;

        //메세지
        var message = response.message;

        //이용가능 여부
        EC_SHOP_FRONT_ORDERFORM_DATA.shipping.aShippingCompanyEventResultByApp = response;

        // 우선순위
        // 1. EC체크
        // 2. app 체크
        if (EC_SHOP_FRONT_ORDERFORM_DATA.shipping.bIsAvailAreaViewInitFlag === false) { // 우선 체크된 EC 결과가 배송가능한 조건일 경우 실행 - EC 가 배송불가능한 경우에는 EC 체크로만 끝내도록

            // 앱에 의해 배송가능한 배송사로 판단 되었는지 여부를 저장하기 위한 값.
            EC_SHOP_FRONT_ORDERFORM_DATA.form.sIsAvailableShippingCompanyByApp = shipping_available_flag;
            //메세지
            if (shipping_available_flag === false) {
                if (message) {
                    //이용불가 사유
                    alert(message);
                }
                EC_SHOP_FRONT_ORDERFORM_DISPLAY.shipping.setCustomShippingFirst();
            }
        }

        return;
    },
   /**
     * 배송비 앱 callback 함수
     * 앱에서 전달받은 배송비 정보를 세팅
     * @param aResponse
     */
    setDeliveryAppInfo : function (aResponse)
    {
        if (typeof (aResponse.message) !== 'undefined') {
            EC_SHOP_FRONT_ORDERFORM_APP_DELIVERY.proc.setDeliveryAppInfo(aResponse);
        }
    },
    /**
     * 주문 가능여부 적용
     * EC_SHOP_FRONT_ORDERFORM_APP.exec.setAppOrderEnable (App.js)
     * @param oAppData : 앱사에서 보낸 주문 가능여부 데이터
     */
    setOrderEnable : function(oAppData) {
        try {
            $('#order_enable').val(JSON.stringify(oAppData));
        } catch (e) { }
    },
    /**
     * Ajax Calc 호출
     * AppDiscount.setAppDiscountPrice (AppDiscount.js)
     */
    setDiscountPrice : function(aData) {
        // 앱할인 데이터
        if (aData !== undefined && aData !== null && aData !== {}) {
            var aAppData = JSON.parse(aData);
            oAppRequestData[aAppData['app_key']] = aAppData;
        }

        // 장바구니이고, 디스플레이모드가 3 (장바구니 할인금액 표시함) 일 때
        if (sPage == 'ORDER_BASKET' && sBasketDisplayMode == '3') {
            BasketAppDiscount.doAppDiscountCalculate(oAppRequestData);
        }
        // 주문서 일 때
        if (sPage == 'ORDER_ORDERFORM') {
            EC_SHOP_FRONT_ORDERFORM_APP.exec.setAppDiscount(oAppRequestData);
        }
    }
};

$(document).ready(function()
{
    /**
     * JS 로딩후 셀렉트 박스 활성화
     * Jira : ECHOSTING-69324
     */
    $('select[class^="ProductOption"]').removeAttr('disabled');


    $('.btn_wishlist_add').click(function()
    {
        if (!check_wishlist())
            return;

        var str_param = 'command=add';
        $('input[name="basket_info[]"]:checkbox:checked').each(function()
        {
            str_param += '&product_no[]=' + $(this).val().split('|')[0];
        });

        action_wishlist(str_param);
    });

    $('.btn_wishlist_del').click(function()
    {
        if (confirm(__('정말 삭제하시겠습니까?'))) {
            var str_param = 'command=del';
            str_param += '&product_no[]=' + $(this).attr('rel');


            action_wishlist(str_param);
        }
    });

    // 추가입력옵션 글자 길이 체크
    try {
        $("input[class^='ProductAddOption'], input[class^='SetProductAddOption']").live('keyup', function () {
            var iLimit = $(this).attr('maxlength');
            addOptionWord($(this).attr('id'), $(this).val(), iLimit);
        });
    } catch (e) {};

    // 추가입력 옵션 ; 제거
    $('input[class^="SetProductAddOption"]').blur(function(){
        if ($(this).val().search(/;/) > -1){
            alert('특수문자 ;는 입력할 수 없습니다.');
            $(this).val($(this).val().replace(/;/g, ''));
        }
    });

    $('input[name="wish_idx[]"]:checkbox').click(function() {
        if ($(this).attr('is-set-product') !== 'F') {
            $('input[name="wish_idx[]"][is-set-product='+$(this).attr('is-set-product')+']:checkbox').attr('checked', $(this).attr('checked'));
        }
    });
});

var EC_Wishlist = {
    PrepareBasket : function(iProductNo, iCategoryNo, iDisplayGroup, sBasketType, iOrder, iQuantity, bBasket, sOptType, sDefaultOptId, sItemCode, sProductCode, sDelvtype)
    {
        aProductLink = new Array();
        aProductLink.push('product_no='+iProductNo);
        aProductLink.push('cate_no='+iCategoryNo);
        aProductLink.push('display_group='+iDisplayGroup);
        sProductLink = aProductLink.join('&');
        if (parseInt(iQuantity,10) < 1) {
            iQuantity = 1;
        }
        var aData = new Array();
        var bResult = true;

        this.iProductNo = iProductNo;
        var sOptionStr = new Array();

        $("select[id^='" + this.getOptionIdentifier() + "'].ProductOption" + iOrder).each(function(i)
        {
            if ($(this).attr('required')) {
                if ($.inArray($('option:selected',this).val(), ['*','**']) > -1) {
                    alert(__('필수 옵션을 선택해주세요.'));
                    $(this).focus();
                    bResult = false;
                    return false;
                }
            }
            var sOptionVal = $('option:selected',this).val().split('|')[0];
            aData.push('optionids[]='+$(this).attr('name'));
            if ($(this).attr('required') == true) {
                aData.push('needed[]='+$(this).attr('name'));
            }
            var iSelectedIndex = $(this).get(0).selectedIndex;
            if ($(this).attr('required') && iSelectedIndex > 0) iSelectedIndex -= 1;

            if (iSelectedIndex > 0) {
                aData.push($(this).attr('name')+'='+sOptionVal);
            }

        });
        if (bResult === false) return false;

        // 품절여부 확인
        if (this.isSoldout(iOrder)) {
            return false;
        }

        // 옵션 타입 받아오기
        var sOptionType = eval('sOptionType'+iProductNo);
        if (sOptionType !== '') {
            aData.push('option_type='+sOptionType);
        }

        var aProductMax =  eval('aProductMax'+iProductNo);
        if (aProductMax !== '') {
            aData.push('product_max='+aProductMax.product_max);
            aData.push('product_max_type='+aProductMax.product_max_type);
        }
        if (aData.length > 0) {
            var sOptionStr = aData.join('&');
        }

        var aAddOption = new Array();
        $('input.ProductAddOption' + iOrder).each(function()
        {
            var regex = /[\;\\]/g;
            if (regex.test($(this).val()) === true) {
                alert(__('특수문자는 입력할 수 없습니다.'));
                $(this).val($(this).val().replace(regex, ''));
                bResult = false;
                return false;
            }

            if ( $(this).attr('require') == 'T' ) {
                if ($(this).val().replace(/^[\s]+|[\s]+$/g,'').length == 0) {
                    alert(__('추가 옵션을 입력해주세요.'));
                    $(this).focus();
                    bResult = false;
                    return false;
                }
            }
            aData.push('option_add[]=' + $(this).val());
            aAddOption.push($(this).attr('optionname'));
        });

        if (bResult === false) return false;

        if (sItemCode == "" || typeof(sItemCode) == "undefined") {
            if (Olnk.isLinkageType(sOptType) === false) {
                var sItemCode = (EC_Wishlist.getItemCode(iOrder, iProductNo) == null) ? sDefaultOptId : EC_Wishlist.getItemCode(iOrder, iProductNo);
            } else {
                var sItemCode = sProductCode + '000A';
            }
        }

        aData.push('add_option_name=' + aAddOption.join(';'));
        aData.push('command=add');
        aData.push('quantity=' + iQuantity);
        aData.push('product_no=' + iProductNo);
        aData.push('main_cate_no=' + iCategoryNo);
        aData.push('display_group=' + iDisplayGroup);
        aData.push('basket_type=' + sBasketType);
        aData.push('delvtype=' + sDelvtype);

        if (sItemCode != null && $.isArray(sItemCode) === true) {
            for (var iKey=0; iKey<sItemCode.length; iKey++) {
                aData.push('selected_item[]=' + iQuantity + '||' + sItemCode[iKey]);
            }
        } else {
            aData.push('selected_item[]=' + iQuantity + '||' + sItemCode);
        }
        if (typeof (basket_page_flag) != 'undefined' && basket_page_flag == 'T') {
            aData.push('basket_page_flag=' + basket_page_flag);
        }

        if (Olnk.isLinkageType(sOptType) === true) {
            var aItemCode = Olnk.getSelectedItemForBasket(sProductCode, $("select[id^='" + this.getOptionIdentifier() + "'].ProductOption" + iOrder), iQuantity);

            if ( aItemCode.bCheckNum === false ) {
                var _aItemValueNo = Olnk.getProductAllSelected(sProductCode , $("select[id^='" + this.getOptionIdentifier() + "'].ProductOption" + iOrder), iQuantity);
                if ( _aItemValueNo !== false ) {
                    aData.push('selected_item_by_etype[]=' + $.toJSON(_aItemValueNo));
                }
            } else {
                aData.push('selected_item_by_etype[]=' + $.toJSON(aItemCode));
            }


        }

        var sData = aData.join('&');
        sAction = '/exec/front/order/basket/';

        var sType  = null;
        if (bBasket === 'T') {
            sType = 2;
            } else {
                if (typeof(sItemCode) != "undefined" && sItemCode != "") {
                    sOptionStr = sOptionStr + "&item_code[]=" + sItemCode;
                }
                selectbuy_action('&'+sOptionStr, iProductNo);
                sData = sData + '&quantity_override_flag='+sIsPrdOverride;

            sType = 1;
            sData = sData + '&redirect=' + sType;
        }

        action_basket(sType, 'category', sAction, sData, sBasketType);
    },

    /**
     * 뉴상품의 경우 아이템 코드를 받아오는 로직
     */
    getItemCode : function(iOrder, iProductNo)
    {
        var sHasOption = eval("sOptionType" + iProductNo);
        if (sHasOption == "") {
            return eval("sItemCode" + iProductNo);
        }

        var sTargetClass = "[id^='" + this.getOptionIdentifier() + "'].ProductOption" + iOrder + ":visible";
        if ($(sTargetClass).length == 0) {
            return null;
        }

        var bRequire = false;
        $(sTargetClass).each(function() {
            if ($(this).attr('required') === true) {
                if ($(this).val() == '*' || $(this).val() == '**') {
                    bRequire = true;
                    $(this).focus();
                    alert(__('필수 옵션을 선택해주세요.'));
                    return false;
                }
            }
        });
        if (bRequire === true) return null;

        var aItemMapper = null;
        if (eval('item_listing_type'+iProductNo) == 'S') {
            aItemMapper =  $.parseJSON(eval('option_value_mapper'+iProductNo));
        }

        var aItemValue = new Array();
        var aIgnoreValue = ['*', '**'];

        if (aItemMapper == null || eval('item_listing_type'+iProductNo) == 'C') {
            $("[id^='" + EC_Wishlist.getOptionIdentifier() + "'].ProductOption"+iOrder + ":visible").each(function() {
               if ($.inArray(this.value, aIgnoreValue) === -1) {
                   aItemValue.push(this.value);
               }
            });
            return aItemValue;
        } else {
            $("[id^='" + this.getOptionIdentifier() + "'].ProductOption" + iOrder + ":visible").each(function() {
               if ($.inArray(this.value, aIgnoreValue) === -1) {
                   aItemValue.push(this.value);
               }
            });
            return aItemMapper[aItemValue.join('#$%')];
        }
    },

    /**
     * 옵션ID 식별자명
     * @return string
     */
    getOptionIdentifier: function()
    {
        // 최근본 상품 호환을 위해
        var sIdentifierId = "wishlist_product_option";
        if ($("select[id^='wishlist_product_option']").length == 0 && $("select[id^='recent_product_option_id']").length > 0) {
            sIdentifierId = "recent_product_option";
        }

        return sIdentifierId;
    },

    isSoldout: function(iIndex)
    {
        if (typeof(aWishlistProductData) != "undefined") {
            if (aWishlistProductData[iIndex].is_soldout == "T") {
                alert(sprintf(__("이 상품은 현재 재고가 부족하여 판매가 잠시 중단되고 있습니다.\n\n제품명 : %s"), aWishlistProductData[iIndex].product_name));
                return true;
            }
        }

        return false;
    },

    /**
     * 선택상품 삭제하기
     */
    deleteSelect: function()
    {
        if (this.isChecked() == false) {
            alert(__('상품을 선택해주세요.'));
            return false;
        }

        if (confirm(__('선택하신 상품을 삭제하시겠습니까?'))) {
            var str_param = 'command=del';
            str_param += '&key=idx&' + $("input[name='wish_idx[]']:checked").serialize();

            var sParamIsSetProductInfo = NewWishlist.getWishlistDeleteIsSetProduct(true);
            if (sParamIsSetProductInfo !== false) {
                str_param += sParamIsSetProductInfo;
            }

            action_wishlist(str_param);
        }

        return false;
    },

    /**
     * 관심상품 비우기
     */
    deleteAll: function()
    {
        if (aWishlistProductData.length == 0) {
            alert(__('관심상품이 없습니다.'));
            return false;
        }

        if (confirm(__('관심상품을 비우시겠습니까?'))) {
            var aWishIdx = [];
            for (var i = 0, length = aWishlistProductData.length; i < length; i++) {
                aWishIdx.push("wish_idx[]=" + aWishlistProductData[i].wish_list_idx);
            }
            var str_param = 'command=del';
            str_param += '&key=idx&' + aWishIdx.join("&");
            var sParamIsSetProductInfo = NewWishlist.getWishlistDeleteIsSetProduct(false);
            if (sParamIsSetProductInfo !== false) {
                str_param += sParamIsSetProductInfo;
            }
            str_param += '&clear=t';
            action_wishlist(str_param);
        }
    },

    /**
     * 관심상품 전체상품 주문
     */
    orderAll: function()
    {
        // 관심상품수 체크
        if (aWishlistProductData.length == 0) {
            alert(__('관심상품이 없습니다.'));
            return false;
        }

        if (this.isDifferentDelvType(true) && EC_GLOBAL_INFO.isGlobal() === false) {
            alert(__('국내배송상품과 해외배송상품은 함께 주문할 수 없습니다.\n같은 배송 상품만 선택해 주세요.'));
            return false;
        }

        // 장바구니에 담고 주문서 작성
        var aCheckedProduct = [];
        var sBasketType = 'A0000';
        var sDelvType = 'A';
        for (var i = 0, length = aWishlistProductData.length; i < length; i++) {
            // 품절여부 확인
            if (this.isSoldout(i)) {
                return false;
            }


            var aData = [];
            var aPrdData = aWishlistProductData[i];

            var sOptionType = eval('sOptionType'+aPrdData.product_no);

            if (intval(aPrdData.set_product_no) > 0 ) {
                continue;
            }
            var aProductMax =  eval('aProductMax'+aPrdData.product_no);
            if (aProductMax !== '') {
                aData.push('product_max='+aProductMax.product_max);
                aData.push('product_max_type='+aProductMax.product_max_type);
            }
            aData.push('command=add');
            aData.push('option_type=' + sOptionType);
            aData.push('option_add[]=' + aPrdData.opt_add);
            aData.push('quantity=1');
            aData.push('product_no=' + aPrdData.product_no);
            aData.push('main_cate_no=' + aPrdData.main_cate_no);
            aData.push('display_group=' + aPrdData.display_group);
            aData.push('basket_type=' + aPrdData.basket_type);
            aData.push('delvtype=' + aPrdData.delvtype);
            aData.push('selected_item[]=' + aPrdData.quantity + '||' + aPrdData.item_code);
            aData.push('is_set_product=' + aPrdData.is_set_product);
            aData.push('set_product_no=' + aPrdData.set_product_no);
            aData.push('basket_prd_no=' + aPrdData.basket_prd_no);

            var sData = aData.join('&');
            sAction = '/exec/front/order/basket/';
            action_basket(2, 'detail', sAction, sData, aPrdData.basket_type, true);

            // for order
            aCheckedProduct[i] = aPrdData.product_no + ":" + aPrdData.opt_id;
            sDelvType = aPrdData.delvtype;
        }

        return false;

        //무이자 할부 상품만 있는지 체크
        if (this.isAllInstallmentType(aWishlistProductData) == true) {
            sBasketType = 'A0001';
        }

        aParam = {
            checked_product : aCheckedProduct.join(','),
            basket_type     : sBasketType,
            delvtype        : sDelvType
        };


        var sOrderUrl = '/order/orderform.html?basket_type='+ sBasketType;
        sOrderUrl += '&delvtype=' + sDelvType;

        $.post('/exec/front/order/order/', aParam, function(data) {
            if (data.result < 0) {
                alert(data.alertMSG);
                return;
            }

            if (data.isLogin == 'F') { // 비로그인 주문
                location.href = sLoginUrl + '?noMember=1&returnUrl=' + escape(sOrderUrl);
            } else {
                location.href = sOrderUrl;
            }
        }, 'json');
    },

    /**
     * 선택상품 장바구니 담기
     */
    basket: function()
    {
        if (this.isChecked()) {
            if (this.isDifferentDelvType() && EC_GLOBAL_INFO.isGlobal() === false) {
                alert(__('국내배송상품과 해외배송상품은 함께 장바구니에 담을 수 없습니다.\n같은 배송 상품만 선택해 주세요.'));
                return false;
            }

            var sDelvType = 'A';
            for (var i = 0, length = aWishlistProductData.length; i < length; i++) {
                // 품절여부 확인
                if (this.isSoldout(i)) {
                    return false;
                }

                var aData = [];
                var aPrdData = aWishlistProductData[i];
                var sOptionType = eval('sOptionType'+aPrdData.product_no);

                var aProductMax =  eval('aProductMax'+aPrdData.product_no);
                if (aProductMax !== '') {
                    aData.push('product_max='+aProductMax.product_max);
                    aData.push('product_max_type='+aProductMax.product_max_type);
                }
                aData.push('command=add');
                aData.push('wish_list_idx='+aPrdData.wish_list_idx);
                aData.push('option_type=' + sOptionType);
                aData.push('option_add[]=' + aPrdData.opt_add);
                aData.push('quantity=1');
                aData.push('product_no=' + aPrdData.product_no);
                aData.push('main_cate_no=' + aPrdData.main_cate_no);
                aData.push('display_group=' + aPrdData.display_group);
                aData.push('basket_type=' + aPrdData.basket_type);
                aData.push('delvtype=' + aPrdData.delvtype);
                aData.push('selected_item[]=' + aPrdData.quantity + '||' + aPrdData.item_code);


                var sData = aData.join('&');
                sAction = '/exec/front/order/basket/';
                action_basket(2, 'detail', sAction, sData, aPrdData.basket_type, true);

                sDelvType = aPrdData.delvtype;
            }

        } else {
            alert(__('상품을 선택해주세요.'));
        }
    },

    /**
     * 상품선택여부
     */
    isChecked: function()
    {
        if ($("input[name='wish_idx[]']:checked").length > 0) {
            return true;
        }

        return false;
    },

    /**
     * 관심상품 배송유형 섞였는지 체크
     * @param boolean bIsAll 전체상품인지 선택상품인지(true : 전체, false : 선택)\
     * @return boolean false:오직하나,true:해외/국내 석임
     */
    isDifferentDelvType: function(bIsAll)
    {
        var aDelvType = [];
        if (bIsAll) {
            // delvtype 값 모으기
            for (var i = 0, length = aWishlistProductData.length; i < length; i++) {
                if ($.inArray(aWishlistProductData[i].delvtype, aDelvType) < 0) {
                    aDelvType.push(aWishlistProductData[i].delvtype);
                }
            }
        } else {
            var aWishIdx = [];
            $("input[name='wish_idx[]']:checked").each(function() {
                aWishIdx.push(parseInt($(this).val()));
            });

            // delvtype 값 모으기
            for (var i = 0, length = aWishlistProductData.length; i < length; i++) {
                if ($.inArray(aWishlistProductData[i].wish_list_idx, aWishIdx) >= 0) {
                    if ($.inArray(aWishlistProductData[i].delvtype, aDelvType) < 0) {
                        aDelvType.push(aWishlistProductData[i].delvtype);
                    }
                }
            }
        }

        if (aDelvType.length > 1) {
            return true;
        }

        return false;
    }
};

function check_wishlist()
{
    if ($('input[name="basket_info[]"]:checkbox:checked').length <= 0) {
        alert(__('상품을 선택해주세요.'));
        return false;
    }

    return true;
}

/**
 * 관심상품 Action
 * @param string sQueryString 파라미터
 * @param string sFrom 요청위치
 */
function action_wishlist(sQueryString, sFrom)
{
    var sFrom = typeof(sFrom) == "undefined" ? "" : sFrom;
    if (sQueryString != "") {
        $.post(sWishUrl, sQueryString, function(req) {
            //새로운 모듈 사용시에는 중복되어있어도 처리된것으로 간주함.. 왜 그렇게하는지는 이해불가
            if (req.command == 'add' && (req.result == 'SUCCESS' || (req.bIsUseOptionSelect === true && req.result === 'NO_TARGET'))) {
                alert(__('관심상품에 등록되었습니다'));
                if (sFrom == "wishlist") {
                    location.reload();
                }
            } else if (req.command == 'del' && req.result == 'SUCCESS') {
                alert(__('관심상품이 삭제되었습니다.'));
                location.reload();
            } else if (req.command == 'update' && req.result == 'SUCCESS') {
                alert(__('관심상품의 옵션이 변경되었습니다.'));
                location.reload();
            } else if (req.result == 'NOT_LOGIN') {
                alert(__('로그인이 필요합니다'));
            } else if (req.result == 'INVALID_REQUEST') {
                alert(__('잘못된 요청입니다'));
            } else if (req.result == 'NO_TARGET') {
                alert(__('이미 등록된 상품입니다'));
            } else if (req.command == 'add' && req.result == 'ERROR') {
                alert(__('등록이 실패하였습니다.'));
            } else if (req.command == 'del' && req.result == 'ERROR') {
                alert(__('삭제가 실패하였습니다.'));
            } else if (req.command == 'update' && req.result == 'ERROR') {
                alert(__('옵션변경을 실패하였습니다.'));
            } else {
                alert(__('잘못된 요청입니다'));
            }

        },'json');
    }
}

/**
 * 관심상품
 */
var NewWishlist = {
    sLayerBoxId : '' ,
    sIsPrdOverride : 'F',
    bIsOrderProc : false,//구매불가 상품이 있을떄 구매진행여부, 기본값은 구매안함
    oForm : null,
    /**
     * 관심상품옵션 변경 or 추가
     * @param string sMode 액션모드(update:옵션변경, add:옵션추가)
     * @param int iIndex 품목정보 배열index
     * @param int iProductNo 상품번호
     */
    modify: function(sMode, iIndex, iProductNo)
    {
        var sReg = /^\*/;
        var sOptionStr = $("#wishlist_product_option_id" + iIndex).val();

        // 필수옵션선택여부 체크
        if (this.isValidate(iIndex, sMode) == false) {
            return false;
        }

        iIndex = parseInt(iIndex, 10);

        // 관심상품 idx
        var iWishIdx = aWishlistProductData[iIndex].wish_list_idx;

        // 상품연동형 옵션타입인지 여부
        var isOptionEtype = Olnk.isLinkageType(aWishlistProductData[iIndex].option_type);

        // 품목코드 추출
        var oItemInfo = {};
        if (isOptionEtype === true) {
            oItemInfo = Olnk.getMockItemInfo({
                'product_no' : aWishlistProductData[iIndex].product_no,
                'product_code' : aWishlistProductData[iIndex].product_code
            });
        } else {
            oItemInfo = this.getItemInfo(iIndex, iProductNo);
        }

        // 재고정보 추출
        var sKey = "option_stock_data" + iProductNo;
        var oItemStock = $.parseJSON(window[sKey]);

        var oItemEtype;

        // 이미 담겨져 있는지 체크
        if (isOptionEtype == true) {
            var oData;
            var sItemEtype = '';
            var aItemEtype = new Array();
            var sSelectedItemEtype = '';
            var aSelectedItemEtype = new Array();
            var j = 0;
            $('.ProductOption' + iIndex + ':visible').each(function() {
                if (/^\*+$/.test($(this).val()) === false ) {
                    aSelectedItemEtype.push($(this).val());
                }
            });

            sSelectedItemEtype = aSelectedItemEtype.join('!@#');

            for (var i=0 ; i < aWishlistProductData.length; i++) {
                // 지금 수정 중인 상품은 중복체크에서 제외
                if (sMode === 'update' && i === iIndex) {
                    continue;
                }

                if ( iProductNo == aWishlistProductData[i].product_no ) {
                    sItemEtype = '';
                    aItemEtype = [];
                    oData = aWishlistProductData[i].selected_item_by_etype.options;
                    for (j in oData) {
                        aItemEtype.push(oData[j]);
                    }

                    sItemEtype = aItemEtype.join('!@#');
                    if ( sSelectedItemEtype ==  sItemEtype) {
                        alert(__('이미 등록된 상품입니다'));
                        return false;
                    }
                }
            }
        } else {
            for (var i=0, length = aWishlistProductData.length; i < length; i++) {
                // 지금 수정 중인 상품은 중복체크에서 제외
                if (sMode === 'update' && i === iIndex) {
                    continue;
                }

                if (oItemInfo.item_code == aWishlistProductData[i].item_code && parseInt(oItemInfo.set_product_no, 10) === parseInt(aWishlistProductData[i].set_product_no, 10)) {
                    alert(__('이미 등록된 상품입니다'));
                    return false;
                }
            }
        }

        // 옵션추가
        var aParams = [];
        if (sMode == "add") {
            aParams.push("command=add");
            var aRow = $('.xans-myshop-wishlistitem>.xans-record-').eq(iIndex).children(0);
            var bIndividualSetProduct = false;
            var oIndividualSetProductRow = null;
            for (var x in aRow) {
                if (aRow.hasOwnProperty(x) === false) {
                    continue;
                }
                if ($(aRow[x]).hasClass('individual-set-child') === true) {
                    bIndividualSetProduct = true;
                    oIndividualSetProductRow = $(aRow[x]);
                    break;
                }
            }
            if (bIndividualSetProduct === true) {
                // 분리구매형 세트상품인지 확인
                var aIndividualSetProductClass = oIndividualSetProductRow.attr('class').split(' ');
                for (var x in  aIndividualSetProductClass) {
                    if (aIndividualSetProductClass[x].substring(0, 15) === 'set-product-no-') {
                        var iSetProductNum = aIndividualSetProductClass[x].substring(15);
                        break;
                    }
                }
                var sItemCode = oItemInfo.item_code;
                aParams.push('selected_item[]=1||' + sItemCode);
                aParams.push('set_product_no=' + iSetProductNum);
                aParams.push('product_no=' + iProductNo);
                aParams.push('is_set_product=T');
                aParams.push('is_individual_set_product=T');
            } else {
                aParams.push("product_no=" + iProductNo);
                aParams.push("selected_item[]=" + oItemInfo.opt_id);
            }
        } else {
            aParams.push("command=update");
            aParams.push("wish_idx=" + iWishIdx);
            aParams.push("item_code=" + oItemInfo.item_code);
            aParams.push("opt_str=" + oItemInfo.opt_str);
        }

        aParams = Olnk.hookParamForWish(aParams, {
            'product_code' : aWishlistProductData[iIndex].product_code,
            'quantity' : 1,
            'option_type' : aWishlistProductData[iIndex].option_type,
            'targets' : $('.ProductOption' + iIndex + ':visible')
        });

        // 추가옵션 - (ECHOSTING-92287, by wcchoi)
        var aAddOpt = [];
        $("input.ProductAddOption" + iIndex + ":visible").each(function() {
            var _name = $(this).attr('OptionName');
            var _val = $(this).val();
            aAddOpt.push(_name + '*' + _val);
        });

        if (aAddOpt.length > 0) {
            aParams.push('add_option=' + encodeURIComponent(aAddOpt.join(',')));
        }

        // action
        action_wishlist(aParams.join("&"), "wishlist");
    },

    /**
     * 뉴상품의 경우 아이템 코드를 받아오는 로직
     * @param int iIndexiIndexiIndexiIndex 품목정보배열 index
     * @param int iProductNo 상품번호
     */
    getItemInfo : function(iIndex, iProductNo)
    {
        var oItemInfo = {
            "product_no": iProductNo,
            "item_code": "",
            "opt_id": "",
            "opt_str": "",
            "set_product_no":""
        };

        oItemInfo.set_product_no = aWishlistProductData[iIndex].set_product_no;
        // 옵션이없는 경우의 처리
        if (aWishlistProductData[iIndex].has_option === 'F') {
            oItemInfo.item_code = aWishlistProductData[iIndex].item_code;
            oItemInfo.opt_id = aWishlistProductData[iIndex].item_code.substr(8);
            return oItemInfo;
        }

        // 분리옵션 여부(T:조합옵션, F:분리옵션 in has_option is 'T')
        var oWishlistData = aWishlistProductData[iIndex];
        var sOptionType = oWishlistData.option_type;
        if (oWishlistData.has_option == 'F' || $(".ProductOption" + iIndex + ":visible").length == 0) {
            oItemInfo.item_code = oWishlistData.item_code;
        } else {
            // ECHOSTING-64737 bug fix
            if ($('.ProductOption' + iIndex + ":visible").length == 0) {
                oItemInfo.item_code = oWishlistData.item_code;
            } else {
                if (eval("item_listing_type" + iProductNo) == "C" || sOptionType == "F") {
                    oItemInfo.item_code = $("[id^='" + this.getOptionIdentifier() + "'].ProductOption" + iIndex + ":visible").val();
                    oItemInfo.opt_str = $("[id^='" + this.getOptionIdentifier() + "'].ProductOption" + iIndex + ' :selected').text();

                    oItemInfo.opt_str = oItemInfo.opt_str.replace(/\-/g, "/");
                } else {
                    var aItemValue = new Array();
                    $("[id^='" + this.getOptionIdentifier() + "'].ProductOption" + iIndex + ":visible").each(function() {
                        aItemValue.push($(this).val());
                    });
                    var aItemMapper = $.parseJSON(eval("option_value_mapper" + iProductNo));

            oItemInfo.item_code = aItemMapper[aItemValue.join("#$%")];
                    oItemInfo.opt_str = aItemValue.join("/");
                }
            }
        }
        oItemInfo.opt_id = oItemInfo.item_code.substr(8);

        return oItemInfo;
    },

    /**
     * 주문관련 액션(한개씩 액션이 일어날때마다)
     * @param string sMode 액션모드
     * @param int iIndex 배열index키
     */
    actionOrder: function(sMode, iIndex)
    {
        // 필수 추가옵션값만 가져오기 - (ECHOSTING-92287, by wcchoi)
        var aRequiredOptAdd = this.getRequiredAddOption(iIndex);
        for (var i in aRequiredOptAdd) {
            if (aRequiredOptAdd[i] == '') {
                alert(__('옵션 정보에 문제가 있어 진행할 수 없습니다. \n확인 후 다시 시도해 주세요.'));
                return;
            }
        }

        if (sMode == "basket") {
            if (typeof(iIndex) != "undefined" && iIndex != null) {
                this.basketOne(iIndex);
            } else {
                this.basket();
            }
        } else {
            this.order(iIndex);
        }
    },


    /**
     * 필수 추가옵션값만 가져오기 - (ECHOSTING-92287, by wcchoi)
     * @param int iIndex 배열index키
     * @return array 필수 추가옵션정보
     */
    getRequiredAddOption : function(iIndex)
    {
        var aRequiredOptAdd = [];

        // 뉴상품 && 구스킨의 경우
        if ($("[id^='wishlist_option_modify_layer_']").length <= 0) {
            $("input.ProductAddOption" + iIndex).each(function() {
                if ($(this).attr('require') == 'F') return;

                aRequiredOptAdd.push($(this).val());
            });

            return aRequiredOptAdd;
        }

        // aWishlistProductData.opt_add 값 파싱
        var aOptAdd = {};
        var aTmp = decodeURIComponent(aWishlistProductData[iIndex].opt_add).split(';');
        for (var i = 0; i < aTmp.length; i++) {
            var tok = aTmp[i].split('=');
            aOptAdd[i] = tok[1];
        }

        // 필수 추가옵션값만 뽑아내서...
        var i = 0;
        //장바구니페이지에서 장바구니의 옵션영역과 관심상품의 옵션영역을 분리하기위해 추가
        $(".xans-myshop-optionaddlist>.xans-record->.ProductAddOption" + iIndex).each(function() {
            if ($(this).attr('require') == 'F') {
                i++;
                return;
            }

            aRequiredOptAdd.push(aOptAdd[i] || '');
            i++;
        });
        return aRequiredOptAdd;
    },


    isValidate: function(iIndex, sMode)
    {
        var sOptionStr = [];
        var bIsPass = true;
        $("select[id^='" + this.getOptionIdentifier() + "'].ProductOption" + iIndex + ":visible").each(function(i) {
            if ($(this).attr('required')) {
                if ($('option:selected',this).val().indexOf('*') > -1) {
                    alert(__('필수 옵션을 선택해주세요.'));
                    $(this).focus();
                    bIsPass = false;
                    return false;
                }
            }
        });
        if (bIsPass === false) {
            return false;
        }

        var iCount = 0;
        $("input.ProductAddOption" + iIndex + ":visible").each(function() {
            iCount++;
            if ($(this).attr('require') == 'T') {
                if ($(this).val().replace(/^[\s]+|[\s]+$/g,'').length == 0) {
                    $(this).focus();
                    bIsPass = false;
                    return false;
                }
            }
        });

        // // 사용자지정옵션인경우 옵션변경불가(기존사양)
        // if (sMode == 'update' && iCount > 0) {
        //     alert(__("사용자 지정 옵션 상품은 옵션변경을 하실 수 없습니다."));
        //     bIsPass = false;
        //     return false;
        // }

        if (bIsPass === false) {
            alert(__('추가 옵션을 입력해주세요.'));
        }

        return bIsPass;
    },

    isSoldout: function(iIndex)
    {
        if (aWishlistProductData[iIndex].set_product_no > 0) {
            return false;
        }
        if (aWishlistProductData[iIndex].is_soldout == "T") {
            alert(sprintf(__("이 상품은 현재 재고가 부족하여 판매가 잠시 중단되고 있습니다.\n\n제품명 : %s"), aWishlistProductData[iIndex].product_name));
            return true;
        }

        return false;
    },
    isPurchase : function(iIndex, bAlert)
    {
        if (typeof(bAlert) === 'undefined') {
            bAlert = true;
        }

        if (aWishlistProductData[iIndex].enable_purchase === "F") {
            if (bAlert === true) {
                alert(__('로그인 하셔야 주문 가능한 상품이 있습니다.\n비회원인 경우 회원가입 후 이용하여 주세요.'));
                location.href = '/member/login.html?noMember=1&returnUrl=' + escape(window.location.href);
            }
            return false;
        }

        return true;
    },

    isReserve: function(iIndex)
    {
        if (aWishlistProductData[iIndex].is_reserve_stat === "R") {
            alert(__('ITEMS.MAY.SHIPPED', 'SHOP.JS.FRONT.NEW.WISH.LIST'));
            return true;
        }

        return false;
    },

    /**
     * all check or uncheck
     */
    checkAll: function(obj)
    {
        var bIsChecked = $(obj).attr("checked")
        $("input[name='wish_idx[]']").each(function() {
            $(this).attr("checked", bIsChecked);
        });
    },
    getWishlistDeleteIsSetProduct : function(bChecked)
    {
        if ($(aWishlistProductData).length < 1) {
            return false;
        }

        var aWishListIndex = [];
        var aWishListDeleteSetProductInfo = [];
        var sChecked = (bChecked === true) ? ':checked' : '';

        $("input[name='wish_idx[]']" + sChecked).each(function(){
            aWishListIndex.push($(this).val());
        });

        $.each(aWishListIndex, function (i, iWishlistIndex) {
            if (iWishlistIndex != aWishlistProductData[i].wish_list_idx) {
                return true;
            }

            aWishListDeleteSetProductInfo.push("wishlist_delete_set_product_info[" + aWishlistProductData[i].product_no + "]=" + aWishlistProductData[i].is_set_product);
        });

        return '&' + aWishListDeleteSetProductInfo.join("&");
    },
    /**
     * 선택상품 삭제하기
     */
    deleteSelect: function()
    {
        if (this.isChecked() == false) {
            alert(__('상품을 선택해주세요.'));
            return false;
        }

        if (confirm(__('선택하신 상품을 삭제하시겠습니까?'))) {
            var str_param = 'command=del';
            str_param += '&key=idx&' + $("input[name='wish_idx[]']:checked").serialize();

            var sParamIsSetProductInfo = NewWishlist.getWishlistDeleteIsSetProduct(true);
            if (sParamIsSetProductInfo !== false) {
                str_param += sParamIsSetProductInfo;
            }

            action_wishlist(str_param);
        }

        return false;
    },

    /**
     * 관심상품 비우기
     */
    deleteAll: function()
    {
        if (aWishlistProductData.length == 0) {
            alert(__('관심상품이 없습니다.'));
            return false;
        }

        if (confirm(__('관심상품을 비우시겠습니까?'))) {
            var aWishIdx = [];
            for (var i = 0, length = aWishlistProductData.length; i < length; i++) {
                aWishIdx.push("wish_idx[]=" + aWishlistProductData[i].wish_list_idx);
            }
            var str_param = 'command=del';
            str_param += '&key=idx&' + aWishIdx.join("&");
            var sParamIsSetProductInfo = NewWishlist.getWishlistDeleteIsSetProduct(false);
            if (sParamIsSetProductInfo !== false) {
                str_param += sParamIsSetProductInfo;
            }
            str_param += '&clear=t';
            action_wishlist(str_param);
        }
    },

    /**
     * 폼객체 생성
     * @param bIsTruncate 폼내용을 초기화할것인지 여부
     */
    getForm : function(bIsTruncate) {
        if (this.oForm === null) {
            this.oForm = $('<form>');
            this.oForm.attr('method', 'post');
            this.oForm.css('display', 'none');
            $('body').append(this.oForm);
        }

        if (bIsTruncate === true) {
            this.oForm.find(":hidden").remove();
        }
    },

    /**
     * name, value값을 받아 input hidden 태그 반환
     * @param string sName name
     * @param string sValue value
     * @return string input hidden 태그
     */
    getInputHidden : function(sName, sValue) {
        return "<input type='hidden' name='" + sName + "' value='" + sValue + "' />";
    },

    /**
     * 관심상품 전체상품 주문
     */
    orderAll: function()
    {
        // 필수 추가옵션값 체크 - (ECHOSTING-92287, by wcchoi)
        var aIndex = [];
        $("input[name='wish_idx[]']").each(function() {
            aIndex.push($(this).attr('id').replace('wish_idx_', ''));
        });

        // 불량회원 체크
        if (sBlackType == 'P') {
            var sMsg = __('쇼핑몰 관리자가 구매 제한을 설정하여 구매하실 수 없습니다.');
            if (sBlackMsg  != 'undefined' || sBlackMsg != '') {
                var sMsg = sBlackMsg;
            }
            alert(sMsg);
            return false;
        }

        // 관심상품수 체크
        if (aWishlistProductData.length == 0) {
            alert(__('관심상품이 없습니다.'));
            return false;
        }

        if (this.isDifferentDelvType(true) && EC_GLOBAL_INFO.isGlobal() === false) {
            alert(__('국내배송상품과 해외배송상품은 함께 주문할 수 없습니다.\n같은 배송 상품만 선택해 주세요.'));
            return false;
        }

        NewWishlist.bIsOrderProc = false;
        //구매불가상품이 있고 불가상품제외하고 confirm창에서 구매하기를 안했을경우에만 중단
        var bIsCheckEnable = this.checkEnableProduct(false, 'orderAll');
        if (bIsCheckEnable === false && NewWishlist.bIsOrderProc === false) {
            return false;
        }

        // 장바구니에 담고 주문서 작성
        var aCheckedProduct = [];
        var sBasketType = 'A0000';
        if (this.isAllInstallmentType(aWishlistProductData) == true) {
            sBasketType = 'A0001';
        }
        var sDelvType = 'A';

        //폼객체 생서
        var oThis = this;
        this.getForm(true);
        this.oForm.append(this.getInputHidden('command', 'add'));
        this.oForm.append(this.getInputHidden('basket_page_flag', 'T'));
        this.oForm.attr('action', '/exec/front/Order/Wishconvert');
        var iCnt = 0;
        var aIndividualSetProduct = {};
        var save_data = '';
        var oJsonSaveData;

        for (var i = 0 ; i < aWishlistProductData.length ; i++) {
            var aData = [];
            var aPrdData = aWishlistProductData[i];
            var sOptionType = eval('sOptionType'+aPrdData.product_no);

            var aProductMax =  eval('aProductMax'+aPrdData.product_no);
            if (aProductMax !== '') {
                this.oForm.append(this.getInputHidden('product_max['+i+']', aProductMax.product_max));
                this.oForm.append(this.getInputHidden('product_max_type['+i+']', aProductMax.product_max_type));
            }
            //옵션이 선택안된 상품은 패스
            if (aPrdData.opt_id === null || (aPrdData.option_type === 'E' && aPrdData.opt_id.length === 4) || parseInt($('#wish_idx_' + i).attr('enable-order')) !== 1) {
                continue;
            }

            if (aWishlistProductData[i].product_price_type === 'T') {
                continue;
            }

            var iKey = i;
            if (aPrdData.is_set_product === 'T' && aPrdData.set_product_no > 0) {
                var iSetProductNum = aPrdData.set_product_no;
                if (typeof(aIndividualSetProduct[iSetProductNum]) === 'undefined') {
                    aIndividualSetProduct[iSetProductNum] = iKey;
                } else {
                    iKey = aIndividualSetProduct[iSetProductNum]
                }
            }

            var iProductNum =  aPrdData.product_no;

            this.oForm.append(this.getInputHidden('option_type['+iKey+']', sOptionType));
            this.oForm.append(this.getInputHidden('quantity['+iKey+']', aPrdData.quantity));
            this.oForm.append(this.getInputHidden('main_cate_no['+iKey+']', aPrdData.main_cate_no));
            this.oForm.append(this.getInputHidden('display_group['+iKey+']', aPrdData.display_group));
            this.oForm.append(this.getInputHidden('basket_type['+iKey+']', aPrdData.basket_type));
            this.oForm.append(this.getInputHidden('delvtype['+iKey+']', aPrdData.delvtype));
            this.oForm.append(this.getInputHidden('is_set_product['+iKey+']', aPrdData.is_set_product));
            this.oForm.append(this.getInputHidden('product_no['+iKey+']', iProductNum));

            if (aPrdData.is_set_product === 'T') {
                if (aPrdData.set_product_no > 0 ) {
                    this.oForm.append(this.getInputHidden('save_data['+iKey+']', JSON.stringify(eval('aSetIndividaulSaveData' + aPrdData.set_product_no))));

                    this.oForm.append(this.getInputHidden('set_product_no['+iKey+']', aPrdData.set_product_no));
                    this.oForm.append(this.getInputHidden('set_product_type['+iKey+']', 'S'));
                    this.oForm.append(this.getInputHidden('product_code['+iKey+']', aPrdData.set_product_code));
                    this.oForm.append(this.getInputHidden('selected_item['+iKey+'][]', aWishlistProductData[i].quantity + '||' +aWishlistProductData[i].item_code));
                    this.oForm.append(this.getInputHidden('default_opt_id['+iKey+'][]', aWishlistProductData[i].opt_id));
                    this.oForm.append(this.getInputHidden('unit_product_no['+iKey+'][]', aWishlistProductData[i].product_no));
                    this.oForm.append(this.getInputHidden('product_no['+iKey+']', aPrdData.set_product_no));
                } else {
                    this.oForm.append(this.getInputHidden('product_code['+iKey+']', aPrdData.product_code));
                    this.oForm.append(this.getInputHidden('save_data['+iKey+']', aPrdData.basket_save_data));
                    this.oForm.append(this.getInputHidden('selected_item['+iKey+'][]', aPrdData.basket_selected_item));

                    this.oForm.append(this.getInputHidden('default_opt_id['+iKey+']', aPrdData.opt_id));
                }

            } else {
                this.oForm.append(this.getInputHidden('product_code['+iKey+']', aPrdData.product_code));
                this.oForm.append(this.getInputHidden('selected_item['+iKey+'][]', aPrdData.quantity + '||' + aPrdData.item_code));
                this.oForm.append(this.getInputHidden('default_opt_id['+iKey+']', aPrdData.opt_id));
            }


            // 추가옵션 오류 수정 - (ECHOSTING-92287, by wcchoi)
            this.oForm.append(this.getInputHidden('add_option_name['+iKey+']', aPrdData.add_option_name_org));

            $(aPrdData.opt_add_params_org).each(function(iIndex, sValue) {
                oThis.oForm.append(oThis.getInputHidden('option_add['+iKey+'][]', sValue));
            });
            //aData.push('add_option_name=' + aPrdData.add_option_name);

            //쓰이지 않음
            //aData.push(aPrdData.opt_add_params);

            // 파일첨부 옵션
            this.oForm.append(this.getInputHidden('file_option['+iKey+']', FileOptionManager.encode($.parseJSON(aPrdData.option_attached_file_info_json))));

            if (Olnk.isLinkageType(sOptionType) === true) {
                this.oForm.append(this.getInputHidden('selected_item_by_etype['+iKey+'][]', $.toJSON(aPrdData.selected_item_by_etype)));
            }

            iCnt++;
        }

        if (iCnt < 1) {
            return;
        }

        this.oForm.submit();
    },
    /**
     * 선택한상품만 주문하기
     *
     * @param string sOptionParam 옵션 파람값
     * @param int iProductNo 상품번호
     * @param string sSelectedItemByEtype 상품연동형의 경우 입력되는 선택된옵션 json 데이터
     */
    selectbuy_action : function(sOptionParam, iProductNo, sOptionType)
    {

        var sUrl = '/exec/front/order/basket/?command=select_prdcnt&product_no=' + iProductNo + '&option_type=' + sOptionType + '&' + sOptionParam;
        $.ajax(
        {
            url : sUrl,
            dataType : 'json',
            async : false,
            success : function(data)
            {
                if (data.result > 0 && !confirm(sprintf(__('동일상품이 장바구니에 %s개 있습니다.'), data.result) +'\n'+ __('함께 구매하시겠습니까?'))) {
                    NewWishlist.sIsPrdOverride = 'T';
                }
            }
        });
    },


    /**
     * 관심상품 주문(한개만)
     * @param int iIndex 배열index키
     */
    order: function(iIndex)
    {
        //장바구니에 동일상품이있을경우 동시구매 여부 초기화
        NewWishlist.sIsPrdOverride = 'F';
        // 불량회원 체크
        if (sBlackType == 'P') {
            var sMsg = __('쇼핑몰 관리자가 구매 제한을 설정하여 구매하실 수 없습니다.');
            if (sBlackMsg  != 'undefined' || sBlackMsg != '') {
                var sMsg = sBlackMsg;
            }
            alert(sMsg);
            return false;
        }

        // 장바구니에 담고 주문서 작성
        var sBasketType = 'A0000';
        var sDelvType = 'A';

        // 품절여부 확인
        if (this.isSoldout(iIndex)) {
            return false;
        }

        // 구매제한확인
        if (this.isPurchase(iIndex) === false) {
            return false;
        }

        // ECHOSTING-162635 예약주문 Alert
        this.isReserve(iIndex);

        if (this.isPriceContentProduct(iIndex) === true) {
            alert(__('판매가가 없는 상품은 주문하실 수 없습니다. 판매가가 있는 상품으로만 주문해주세요.'));
            return false;
        }


        var aData = [];

        var oPrdData = aWishlistProductData[iIndex];
        var sOptionType = eval('sOptionType'+oPrdData.product_no);
        var aProductMax =  eval('aProductMax'+oPrdData.product_no);
        if (aProductMax !== '') {
            aData.push('product_max='+aProductMax.product_max);
            aData.push('product_max_type='+aProductMax.product_max_type);
        }
        var iProductNum =  oPrdData.product_no;
        aData.push('from=wishlist');
        aData.push('option_type=' + sOptionType);

        aData.push('wish_list_idx='+oPrdData.wish_list_idx);
        aData.push('quantity=' + oPrdData.quantity);
        aData.push('main_cate_no=' + oPrdData.main_cate_no);
        aData.push('display_group=' + oPrdData.display_group);
        aData.push('basket_type=' + oPrdData.basket_type);
        aData.push('delvtype=' + oPrdData.delvtype);
        aData.push("is_set_product=" + oPrdData.is_set_product);
        aData.push("basket_page_flag=T");

        var sItemcode = '';

        if (oPrdData.is_set_product === "T") {
            if (oPrdData.set_product_no > 0 ) {
                iProductNum = oPrdData.set_product_no;
                var aIndividualSetProduct = this.getIndividualSetProductOrderData(iIndex);
                if (aIndividualSetProduct === false) {
                    return false;
                }
                $.merge(aData, aIndividualSetProduct);
            } else {
                aData.push('product_code=' + oPrdData.product_code);
                aData.push("selected_item[]=" + oPrdData.basket_selected_item);
                aData.push("save_data=" + oPrdData.basket_save_data);

                aData.push('default_opt_id=' + oPrdData.opt_id); // ECHOSTING-92287, by wcchoi
            }
        } else {
            // 뉴상품 & 구스킨을 사용하는 경우 예외처리
            if ($("[id^='wishlist_option_modify_layer_']").length <= 0) {
                var oItemInfo = {};

                if (Olnk.isLinkageType(sOptionType) === true) {
                    oItemInfo = Olnk.getMockItemInfo({
                        'product_no' : oPrdData.product_no,
                        'product_code' : oPrdData.product_code
                    });
                } else {
                    oItemInfo = this.getItemInfo(iIndex, oPrdData.product_no);
                }

                aData.push('selected_item[]=' + oPrdData.quantity + '||' + oItemInfo.item_code);
            } else {
                aData.push('selected_item[]=' + oPrdData.quantity + '||' + oPrdData.item_code);
            }

            aData.push('default_opt_id=' + oPrdData.opt_id); // ECHOSTING-92287, by wcchoi
        }
        aData.push('product_no=' + iProductNum);

        // 추가입력옵션 가공
        aData.push('add_option_name=' + oPrdData.add_option_name);

        // 뉴상품 & 구스킨을 사용하는 경우 예외처리
        if ($("[id^='wishlist_option_modify_layer_']").length <= 0) {
            $("input.ProductAddOption" + iIndex).each(function() {
                aData.push('option_add[]=' + encodeURIComponent($(this).val()));
            });
        } else {
            aData.push(oPrdData.opt_add_params);
        }

        // 파일첨부 옵션
        aData.push('file_option='+FileOptionManager.encode($.parseJSON(oPrdData.option_attached_file_info_json)));

        if (Olnk.isLinkageType(sOptionType) === true) {
            if ($("[id^='wishlist_option_modify_layer_']").length <= 0) {
                aData = Olnk.hookParamForWish(aData, {
                    'product_code' : oPrdData.product_code,
                    'quantity' : 1,
                    'option_type' : oPrdData.option_type,
                    'targets' : $('.ProductOption' + iIndex + ':visible'),
                    'selected_item_by_etype' : oPrdData.selected_item_by_etype
                });
            } else {
                aData.push('selected_item_by_etype[]=' + $.toJSON(oPrdData.selected_item_by_etype));
            }
        }

        var sParams = aData.join('&');

        sBasketType = oPrdData.basket_type == '' ? sBasketType : oPrdData.basket_type;
        sDelvType   = oPrdData.delvtype == '' ? 'A' : oPrdData.delvtype;

        //동일상품 구매여부
        NewWishlist.selectbuy_action(sParams, oPrdData.product_no, sOptionType);

        //기존에 이미 담겨있는지 먼저 확인해야하므로 command파라미터를 여기서 추가
        sParams += '&command=add&quantity_override_flag=' + NewWishlist.sIsPrdOverride;

        sAction = '/exec/front/order/basket/';
        action_basket(1, 'detail', sAction, sParams, sBasketType, true);

        // 이미 action_basket에서 주문서로 이동하는데 왜 아래 코드가 중복으로 들어갔는지 알 수 없음
        // 또한 아래 코드는 data가 undefined이므로 스크립트 에러가 발생함
        // 일단 삭제하지 않고 주석 처리함
        /*
        var sCheckedProductParams = oPrdData.product_no + ":" + oPrdData.opt_id;

        // 뉴상품 & 구스킨을 사용하는 경우 예외처리
        if ($("[id^='wishlist_option_modify_layer_']").length <= 0) {
            var oItemInfo = {};
            if (Olnk.isLinkageType(sOptionType) === true) {
                oItemInfo =  aWishlistProductData[iIndex];
                oItemInfo.opt_id = data.opt_id_by_etype;
            } else {
                oItemInfo = NewWishlist.getItemInfo(iIndex, oPrdData.product_no);
            }
            sCheckedProductParams = oPrdData.product_no + ":" + oItemInfo.opt_id;
        }

        // 세트상품인경우 basket_prd_no 붙여주기
        if (typeof(data.isSetProduct) != "undefined" && data.isSetProduct == "T") {
            sCheckedProductParams = oPrdData.product_no + ":" + oPrdData.opt_id + data.aBasketPrdNo[0];
            sCheckedProductParams = sCheckedProductParams + ":T";
            sCheckedProductParams = sCheckedProductParams + ":" + data.aBasketPrdNo[0];
        }

        // 주문진행
        var aParam = {
            checked_product : sCheckedProductParams,
            basket_type     : sBasketType,
            delvtype        : sDelvType
        };
        $.post('/exec/front/order/order/', aParam, function(data) {
            if (data.result < 0) {
                alert(data.alertMSG);
                return;
            }

            var sOrderUrl = '/order/orderform.html?basket_type='+ sBasketType + '&delvtype=' + sDelvType;
            if (data.isLogin == 'F') { // 비로그인 주문
                location.href = sLoginUrl + '?noMember=1&returnUrl=' + escape(sOrderUrl);
            } else {
                location.href = sOrderUrl;
            }
        }, 'json');
        */
    },

    /**
     * 선택상품 장바구니 담기
     * @param int iIndex ㅅㅓㄴ택\
     * @todo 이쪽 정리 해야함. 일단 급해서 작업하고, 이후 여러개 담을때 로직부분은 수정하도록 한다.
     */
    basket: function(iIndex)
    {
        // 선택상품 장바구니 담기 필수 추가옵션값 체크 - (ECHOSTING-92287, by wcchoi)
        var aIndex = [];
        if (typeof(iIndex) == 'undefined' || iIndex == null) {
            $("input[name='wish_idx[]']:checked").each(function() {
                aIndex.push($(this).attr('id').replace('wish_idx_', ''));
            });
        } else {
            aIndex.push(iIndex);
        }

        // 상품에서 직접
        var bIsOne = false;
        if (typeof(iIndex) != "undefined" && iIndex != null) {
            bIsOne = true;
        }

        if (bIsOne || this.isChecked()) {
            if (bIsOne == false && this.isDifferentDelvType() && EC_GLOBAL_INFO.isGlobal() === false) {
                alert(__('국내배송상품과 해외배송상품은 함께 장바구니에 담을 수 없습니다.\n같은 배송 상품만 선택해 주세요.'));
                return false;
            }

            NewWishlist.bIsOrderProc = false;
            //구매불가상품이 있고 불가상품제외하고 confirm창에서 구매하기를 안했을경우에만 중단
            var bIsCheckEnable = this.checkEnableProduct(true);
            if (bIsCheckEnable === false && NewWishlist.bIsOrderProc === false) {
                return false;
            }

            var sDelvType = 'A';
            var iCnt = 0;
            var aIndividualSetProductNum = [];
            for (var i = 0 ; i < aWishlistProductData.length ; i++) {

                // 선택안된상품 패스
                if (bIsOne) {
                    if (iIndex != i) {
                        continue;
                    }
                } else {
                    if ($("#wish_idx_" + i).attr("checked") == false) {
                        continue;
                    }
                }

                if (parseInt($("#wish_idx_" + i).attr("enable-order")) !== 1) {
                    continue;
                }

                // 품절여부 확인
                if (this.isSoldout(i)) {
                    continue;
                }

                // 구매제한확인
                if (this.isPurchase(i) === false) {
                    return false;
                }


                // 상품정보
                var aPrdData = aWishlistProductData[i];

                if (aPrdData.is_set_product === 'T' && aPrdData.set_product_no > 0 && aIndividualSetProductNum.indexOf(aPrdData.set_product_no) > -1) {
                    continue;
                }
                //옵션이 선택안된 상품은 패스
                if (aPrdData.opt_id === null || (aPrdData.option_type === 'E' && aPrdData.opt_id.length === 4)) {
                    continue;
                }

                // 장바구니에서 장바구니담기 액션시
                var sDelvType = aPrdData.delvtype;
                if (typeof(sBasketDelvType) != "undefined" && sBasketDelvType != null) {
                    if (sBasketDelvType == "B") {
                        if (aPrdData.delvtype == "A" && aPrdData.is_able_oversea == "F") {
                            alert(__('국내배송상품은 해외배송상품 장바구니로 이동이 불가능합니다.'));
                            return false;
                        }
                    } else {
                        if (aPrdData.delvtype == "B") {
                            alert(__('해외배송상품은 국내배송상품 장바구니로 이동이 불가능합니다.'));
                            return false;
                        }
                    }
                    sDelvType = sBasketDelvType;
                }

                var aData = [];
                var sOptionType = eval('sOptionType'+aPrdData.product_no);
                var iProductNum  = aPrdData.product_no;
                aData.push('command=add');
                aData.push('option_type=' + sOptionType);
                //aData.push('option_add[]=' + aPrdData.opt_add);
                aData.push('quantity=' + aPrdData.quantity);

                aData.push('main_cate_no=' + aPrdData.main_cate_no);
                aData.push('display_group=' + aPrdData.display_group);
                aData.push('basket_type=' + aPrdData.basket_type);
                aData.push('delvtype=' + sDelvType);
                aData.push('basket_page_flag=T');

                // 추가옵션 오류 수정 - (ECHOSTING-92287, by wcchoi)
                aData.push('add_option_name=' + aPrdData.add_option_name);
                aData.push(aPrdData.opt_add_params);

                if (aPrdData.is_set_product === "T") {

                    aData.push('wish_list_idx='+aPrdData.wish_list_idx);
                    aData.push('basket_page_flag=T');
                    aData.push('is_set_product=T');
                    if (aPrdData.set_product_no > 0) {
                        var iSetProductNum = aPrdData.set_product_no;
                        var iProductNum = aPrdData.set_product_no;
                        if (typeof(aIndividualSetProductNum[iSetProductNum]) === 'undefined') {
                            var aIndividualSetProduct = this.getIndividualSetProductOrderData(i);
                            if (aIndividualSetProduct === false) {
                                return false;
                            }

                            $.merge(aData, aIndividualSetProduct);
                            aIndividualSetProductNum.push(iSetProductNum);
                        }
                    } else {
                        aData.push('product_code=' + aPrdData.product_code);
                        aData.push("selected_item[]=" + aPrdData.basket_selected_item);
                        aData.push("save_data=" + aPrdData.basket_save_data);

                        aData.push('default_opt_id=' + aPrdData.opt_id); // ECHOSTING-92287, by wcchoi
                    }
                } else {
                // 뉴상품 & 구스킨을 사용하는 경우 예외처리
                    if ($("[id^='wishlist_option_modify_layer_']").length <= 0) {
                        var oItemInfo = {};

                        if (Olnk.isLinkageType(sOptionType) === true) {
                            oItemInfo = Olnk.getMockItemInfo({
                                'product_no' : aPrdData.product_no,
                                'product_code' : aPrdData.product_code
                            });
                        } else {
                            oItemInfo = this.getItemInfo(i, aPrdData.product_no);
                        }

                        aData.push('selected_item[]=' + aPrdData.quantity + '||' + oItemInfo.item_code);
                    } else {
                        aData.push('selected_item[]=' + aPrdData.quantity + '||' + aPrdData.item_code);
                    }

                    aData.push('default_opt_id=' + aPrdData.opt_id);
                }
                aData.push('product_no=' + iProductNum);


                aData.push('from=wishlist');

                // 파일첨부 옵션
                aData.push('file_option='+FileOptionManager.encode($.parseJSON(aPrdData.option_attached_file_info_json)));

                if (Olnk.isLinkageType(aPrdData.option_type) === true) {
                    if ($("[id^='wishlist_option_modify_layer_']").length <= 0) {
                        aData = Olnk.hookParamForWish(aData, {
                            'product_code' : aPrdData.product_code,
                            'quantity' : 1,
                            'option_type' : aPrdData.option_type,
                            'targets' : $('.ProductOption' + i + ':visible'),
                            'selected_item_by_etype' : aPrdData.selected_item_by_etype
                        });
                    } else {
                        aData.push('selected_item_by_etype[]=' + $.toJSON(aPrdData.selected_item_by_etype));
                    }
                }
                var sData = aData.join('&');

                sAction = '/exec/front/order/basket/';
                action_basket(2, 'detail', sAction, sData, aPrdData.basket_type, true);

                if (bIsOne) {
                    if (iIndex == i) {
                        break;
                    }
                }
            }
        } else {
            alert(__('상품을 선택해주세요.'));
        }

    },

    /**
     * 장바구니 하나 담기
     */
    basketOne: function(iIndex)
    {
        // 품절여부 확인
        if (this.isSoldout(iIndex)) {
            return false;
        }

        // 구매제한확인
        if (this.isPurchase(iIndex) === false) {
            return false;
        }

        // ECHOSTING-162635 예약주문 Alert
        this.isReserve(iIndex);

        if (this.isPriceContentProduct(iIndex) === true) {
            alert(__('판매가가 없는 상품은 장바구니 담기가 불가능합니다.'));
            return false;
        }


        // 상품정보
        var oPrdData = aWishlistProductData[iIndex];

        // 장바구니에서 장바구니담기 액션시
        var sDelvType = oPrdData.delvtype;
        if (typeof(sBasketDelvType) != "undefined" && sBasketDelvType != null) {
            if (sBasketDelvType == "B") {
                if (oPrdData.delvtype == "A" && oPrdData.is_able_oversea == "F") {
                    alert(__('국내배송상품은 해외배송상품 장바구니로 이동이 불가능합니다.'));
                    return false;
                }
            } else {
                if (oPrdData.delvtype == "B") {
                    alert(__('해외배송상품은 국내배송상품 장바구니로 이동이 불가능합니다.'));
                    return false;
                }
            }
            sDelvType = sBasketDelvType;
        }

        var aData = [];
        var sOptionType = eval('sOptionType'+oPrdData.product_no);

        var aProductMax =  eval('aProductMax'+oPrdData.product_no);
        if (aProductMax !== '') {
            aData.push('product_max='+aProductMax.product_max);
            aData.push('product_max_type='+aProductMax.product_max_type);
        }
        var iProductNum =  oPrdData.product_no;
        aData.push('wish_list_idx='+oPrdData.wish_list_idx);
        aData.push('command=add');
        aData.push('option_type=' + sOptionType);
        aData.push('basket_page_flag=T');
        aData.push('is_set_product=' + oPrdData.is_set_product);
        aData.push('quantity=' + oPrdData.quantity);

        aData.push('main_cate_no=' + oPrdData.main_cate_no);
        aData.push('display_group=' + oPrdData.display_group);
        aData.push('basket_type=' + oPrdData.basket_type);
        aData.push('delvtype=' + sDelvType);
        aData.push('from=wishlist');

        if (oPrdData.is_set_product === 'T') {
            if (oPrdData.set_product_no > 0 ) {
                iProductNum = oPrdData.set_product_no;
                var aIndividualSetProduct = this.getIndividualSetProductOrderData(iIndex);
                if (aIndividualSetProduct === false) {
                    return false;
                }

                $.merge(aData, aIndividualSetProduct);
            } else {
                aData.push('product_code=' + oPrdData.product_code);
                aData.push("selected_item[]=" + oPrdData.basket_selected_item);
                aData.push("save_data=" + oPrdData.basket_save_data);

                aData.push('default_opt_id=' + oPrdData.opt_id); // ECHOSTING-92287, by wcchoi
            }
        } else {
            // 뉴상품 & 구스킨을 사용하는 경우 예외처리
            if ($("[id^='wishlist_option_modify_layer_']").length <= 0) {
                var oItemInfo = {};

                if (Olnk.isLinkageType(sOptionType) === true) {
                    oItemInfo = Olnk.getMockItemInfo({
                        'product_no' : oPrdData.product_no,
                        'product_code' : oPrdData.product_code
                    });
                } else {
                    oItemInfo = this.getItemInfo(iIndex, oPrdData.product_no);
                }

                aData.push('selected_item[]=' + oPrdData.quantity + '||' + oItemInfo.item_code);
            } else {
                aData.push('selected_item[]=' + oPrdData.quantity + '||' + oPrdData.item_code);
            }

            aData.push('default_opt_id=' + oPrdData.opt_id); // ECHOSTING-92287, by wcchoi
        }


        aData.push('product_no=' + iProductNum);


        // 추가입력옵션 가공
        aData.push('add_option_name=' + oPrdData.add_option_name);

        // 뉴상품 & 구스킨을 사용하는 경우 예외처리
        if ($("[id^='wishlist_option_modify_layer_']").length <= 0) {
            $("input.ProductAddOption" + iIndex).each(function() {
                aData.push('option_add[]=' + encodeURIComponent($(this).val()));
            });
        } else {
            aData.push(oPrdData.opt_add_params);
        }

        // 파일첨부 옵션
        aData.push('file_option='+FileOptionManager.encode($.parseJSON(oPrdData.option_attached_file_info_json)));

        if (Olnk.isLinkageType(sOptionType) === true) {
            if ($("[id^='wishlist_option_modify_layer_']").length <= 0) {
                aData = Olnk.hookParamForWish(aData, {
                    'product_code' : oPrdData.product_code,
                    'quantity' : 1,
                    'option_type' : oPrdData.option_type,
                    'targets' : $('.ProductOption' + iIndex + ':visible'),
                    'selected_item_by_etype' : oPrdData.selected_item_by_etype
                });
            } else {
                aData.push('selected_item_by_etype[]=' + $.toJSON(oPrdData.selected_item_by_etype));
            }
        }

        // 장바구니에 담은뒤 탭유지가 되게 하기위해 through basket_result_action()
        delvtype = sDelvType;

        var sData = aData.join('&');

        sAction = '/exec/front/order/basket/';
        action_basket(2, 'detail', sAction, sData, oPrdData.basket_type);
    },

    /**
     * 세트상품의 동일데이터 처리 부분
     */
    getIndividualSetProductOrderData : function(iIndex)
    {
        var aReturn = [];
        var oPrdData = aWishlistProductData[iIndex];
        if (oPrdData.set_product_no === 0 ) {
            return aReturn
        }
        var save_data = '';
        var oJsonSaveData;
        var iIndividualSetProduct = 0;
        for (i = iIndex ; i < aWishlistProductData.length; i++) {
            if (oPrdData.set_product_no === aWishlistProductData[i].set_product_no && aWishlistProductData[i].set_product_no != aWishlistProductData[i].product_no) {
                // 품절여부 확인
                if (aWishlistProductData[i].is_soldout === 'T') {
                    continue;
                }

                if (aWishlistProductData[i].product_price_type === 'T') {
                    continue;
                }

                if (aWishlistProductData[i].enable_order !== true) {
                    continue;
                }

                aReturn.push('selected_item[]=' + aWishlistProductData[i].quantity + '||' +aWishlistProductData[i].item_code);
                aReturn.push('default_opt_id[]=' + aWishlistProductData[i].opt_id);
                aReturn.push('unit_product_no[]=' + aWishlistProductData[i].product_no);
                aReturn.push('add_option_name['+iIndividualSetProduct+']=' + aWishlistProductData[i].add_option_name_org);

                $(aWishlistProductData[i].opt_add_params_org).each(function(iIndex, sValue) {
                    aReturn.push('option_add['+iIndividualSetProduct+'][]=' + sValue);
                });

                iIndividualSetProduct++;
            }
        }
        if (iIndividualSetProduct === 0) {
            return false;
        }

        aReturn.push("save_data=" + JSON.stringify(eval('aSetIndividaulSaveData' + oPrdData.set_product_no)));
        aReturn.push("set_product_no=" + oPrdData.set_product_no);
        aReturn.push("product_code=" + oPrdData.set_product_code);
        aReturn.push("is_set_product=" + oPrdData.is_set_product);
        aReturn.push("set_product_type=S");

        return aReturn;
    },

    /**
     * 상품선택여부
     */
    isChecked: function()
    {
        if ($("input[name='wish_idx[]']:checked").length > 0) {
            return true;
        }

        return false;
    },

    /**
     * 옵션ID 식별자명
     * @return string
     */
    getOptionIdentifier: function()
    {
        // 최근본 상품 호환을 위해
        var sIdentifierId = "wishlist_product_option";
        if ($("select[id^='wishlist_product_option']").length == 0 && $("select[id^='product_option']").length > 0) {
            sIdentifierId = "product_option";
        }

        return sIdentifierId;
    },

    checkEnableProduct : function(bIsChecked, sMode)
    {
        //ECHOSTING-159244 bIsChecked 값이 false 일때는 회원 전용상품은 로그인페이지로 이동
        var bResult = true;
        var bReserve = false;
        var sErrorMsg = '';

        //ECHOSTING-159244 회원 전용 상품 목록용 배열
        var aPurschaseExceptProductName = new Array();
        var iCheckedProduct = 0;
        var oWishlistElement = $("input[name='wish_idx[]']");

        //구매가 불가능한 상품이름(품절 또는 옵션이 없는상품 또는 독립형
        var aExceptProductName = [];
        var oSetProductName = {};

        oWishlistElement.each(function(iIndex) {
            //선택구매인데 체크가 안되어있다면 패스
            if (bIsChecked === true && $(this).attr('checked') !== true) {
                return;
            }

            //ECHOSTING-159244
            if (NewWishlist.isPurchase(iIndex, false) === false) {
                aPurschaseExceptProductName.push(aWishlistProductData[iIndex].product_name);
                return;
            }

            //ECHOSTING-162635
            if ($(this).attr('reserve-order') === 'R') {
                bReserve = true;
            }

            var sProductNameKey = aWishlistProductData[iIndex].product_no;
            if (aWishlistProductData[iIndex].is_set_product === 'T' && aWishlistProductData[iIndex].set_product_no > 0) {
                sProductNameKey = aWishlistProductData[iIndex].set_product_no;
                if (aWishlistProductData[iIndex].product_no === aWishlistProductData[iIndex].set_product_no) {
                    sProductNameKey = aWishlistProductData[iIndex].set_product_no+'-1';
                }
            }

            if (oSetProductName.hasOwnProperty(sProductNameKey) === false) {
                oSetProductName[sProductNameKey] = {'bind':[], 'product_no':[], 'set_product_no':[], 'set_product_name':[]};
            }
            if (parseInt($(this).attr('enable-order')) !== 1 || NewWishlist.isCheckAddOptionEnable(iIndex) === false || NewWishlist.isPriceContentProduct(iIndex) === true) {
                bResult = false;
                var sProductName = aWishlistProductData[iIndex].product_name;
                oSetProductName[sProductNameKey]['bind'].push(sProductName);
                oSetProductName[sProductNameKey]['product_no'].push(aWishlistProductData[iIndex].product_no);
                oSetProductName[sProductNameKey]['set_product_no'].push(aWishlistProductData[iIndex].set_product_no);
                oSetProductName[sProductNameKey]['set_product_name'].push(aWishlistProductData[iIndex].set_product_name);
                return;
            }
        });

        if (sMode === 'orderAll') {
            iCheckedProduct = oWishlistElement.length;
        } else {
            iCheckedProduct = $("input[name='wish_idx[]']:checked").length;
        }

        //ECHOSTING-159244 회원 전용 구매 상품이 있다면
        if (aPurschaseExceptProductName.length > 0) {

            if (iCheckedProduct === aPurschaseExceptProductName.length) {
              //ECHOSTING-159244 비회원으로 구매 가능한 상품이 0 개면 로그인페이지로 무조건 이동
              check_action_nologin();
              return false;
            }

            sErrMsg = __('로그인 하셔야 주문 가능한 상품이 있습니다.\n비회원인 경우 회원가입 후 이용하여 주세요.');

            if (confirm(sErrMsg) === false) {
                return false;
            } else {
                location.href = '/member/login.html?noMember=1&returnUrl=' + escape(window.location.href);
                return false;
            }

            NewWishlist.bIsOrderProc = true;
        }

        var sErrMsg = '';
        if (bResult === false) {
            NewWishlist.bIsOrderProc = false;

            sErrMsg = __('품절 또는 옵션을 직접 선택해야만 주문 가능한 상품이 있습니다. 해당 상품을 제외해 주세요. \n상품명 :');
            for (var sProductNameKey in oSetProductName) {
                var oRow = oSetProductName[sProductNameKey];
                if (oRow.bind.length === 0) {
                    continue;
                }
                var iSetProductNum = oRow.set_product_no[0];
                if (iSetProductNum === 0) {
                    aExceptProductName.push(oRow.bind[0]);
                } else {
                    if ($('input[is-set-product='+iSetProductNum+']').length === oRow.bind.length) {
                        aExceptProductName.push(oRow.set_product_name[0]);
                    } else {
                        aExceptProductName = $.merge(aExceptProductName, oSetProductName[sProductNameKey].bind);
                    }
                }
            }
            sErrMsg = this.getExceptProductNameListAlertMsg(sErrMsg, aExceptProductName);
            alert(sErrMsg);
        }

        //ECHOSTING-162635
        if (bReserve === true && bResult === true) {
            alert(__('ITEMS.MAY.SHIPPED', 'SHOP.JS.FRONT.NEW.WISH.LIST'));
        }


        return bResult;
    },

    getExceptProductNameListAlertMsg : function(sErrMsg, aExceptProduct)
    {
        var aUniqueName = [];
        var sErrAlertMsg = sErrMsg;

        $(aExceptProduct).each(function(iIndex) {
            if (aUniqueName.indexOf(aExceptProduct[iIndex]) === -1) {
                sErrAlertMsg += aExceptProduct[iIndex] + '\n';
                aUniqueName.push(aExceptProduct[iIndex]);
            }
        });
        return sErrAlertMsg;
    },

    isCheckAddOptionEnable : function(iIndex)
    {
        var bResult = true;
        var aRequiredOptAdd = NewWishlist.getRequiredAddOption(iIndex); // 필수 추가입력 옵션값만 가져오기
        for (var j in aRequiredOptAdd) {
            if (aRequiredOptAdd[j] == '') {
                //alert(__('옵션 정보에 문제가 있는 상품이 포함되어 있습니다. \n확인 후 다시 시도해 주세요.'));
                bResult = false;
                break;
            }
        }

        return bResult;
    },

    /**
     * 관심상품 배송유형 섞였는지 체크
     * @param boolean bIsAll 전체상품인지 선택상품인지(true : 전체, false : 선택)\
     * @return boolean false:오직하나,true:해외/국내 석임
     */
    isDifferentDelvType: function(bIsAll)
    {
        var aDelvType = [];
        if (bIsAll) {
            // delvtype 값 모으기
            for (var i = 0, length = aWishlistProductData.length; i < length; i++) {
                if ($.inArray(aWishlistProductData[i].delvtype, aDelvType) < 0) {
                    aDelvType.push(aWishlistProductData[i].delvtype);
                }
            }
        } else {
            var aWishIdx = [];
            $("input[name='wish_idx[]']:checked").each(function() {
                aWishIdx.push(parseInt($(this).val()));
            });

            // delvtype 값 모으기
            for (var i = 0, length = aWishlistProductData.length; i < length; i++) {
                if ($.inArray(aWishlistProductData[i].wish_list_idx, aWishIdx) >= 0) {
                    if ($.inArray(aWishlistProductData[i].delvtype, aDelvType) < 0) {
                        aDelvType.push(aWishlistProductData[i].delvtype);
                    }
                }
            }
        }

        if (aDelvType.length > 1) {
            return true;
        }

        return false;
    },
    isPriceContentProduct : function(iIndex)
    {
        var sTargetData = null;
        if (iIndex === undefined) {
            for (var x in aWishlistProductData) {
                sTargetData = aWishlistProductData[x].product_price_type;
                if (sTargetData === 'T') {
                    return true;
                }
            }
        } else {
            sTargetData = aWishlistProductData[iIndex].product_price_type;
            return sTargetData === 'T';
        }

        return false;
    },
    /*
     *  관심상품 리스트에서 옵션 변경 레이어 창
     */
    showOptionChangeLayer : function(sLayerId)
    {
        $('.optionModify').hide();
        $('#'+sLayerId).show();

        if (bIsNewProduct === true ) {
            $("#" + sLayerId).find('[id^="wishlist_product_option_id"]').eq(0).val('*').trigger('change');
        }
    },
    /**
     * 상품중 무이자 할부 타입의 상품만 있는지 체크
     */
    isAllInstallmentType : function(aWhishListProduct) {
        var iTotalBasketCount = aWhishListProduct.length;
        var bIsAllInstallmentType = true;
        for (var i=0; i < iTotalBasketCount; i++) {
            if (aWhishListProduct[i].basket_type != 'A0001') {
                bIsAllInstallmentType = false;
            }
        }
        return bIsAllInstallmentType;
    },

    /**
     * 모바일 관심상품페이지 옵션선택 레이어
     */
    setOptionSelectMobile : function(iProductNo) {

        //구매옵션레이어 사용가능 여부 세팅
        EC_SHOP_FRONT_PRODUCT_OPTIONLAYER.init(function() {
            EC_SHOP_FRONT_PRODUCT_OPTIONLAYER.setLayer(iProductNo, 1, 'wishlist');
        });
        //EC_SHOP_FRONT_PRODUCT_OPTIONLAYER.setLayer(iProductNo, 1, 'wishlist');
    },

    /**
     * 옵션선택 레이어 위치지정
     */
    setVisibleOptionLayer : function() {
        var iTop = parseInt(( $(window).height() - $("#productOptionIframe").height() ) / 2);
        $("#opt_layer_iframe_parent").css({"top": iTop, "left": 0});
        $('html, body').css({'overflow-y': 'hidden', width: '100%', height: '100%'});
        $('#opt_layer_window').show();
    },

    /**
     * 분리 세트 동시 체크
     */
    setIndividualProductCheck : function(aWishList, bIsChecked) {
        if (typeof(aWishList) != "undefined") {
            var iSetPrdNo = aWishList.set_product_no;

            for (i = 0; i < aWishlistProductData.length; i++) {
                if (iSetPrdNo == aWishlistProductData[i].set_product_no) {
                    $('#wish_idx_' + i ).attr('checked', bIsChecked);
                }
            }

        }
    }
}

$(document).ready(function(){
    // 파일첨부옵션 초기화
    try {
        FileOptionManager.init();
    }catch (e) {};
});



/**
 * JSON.stringify
 * @param object aData JSON.stringify 할 데이터
 * @return string JSON.stringify 된 데이터 반환
 */
function JSON_stringify(aData)
{
    if (!$.stringify) {
        // https://gist.github.com/chicagoworks/754454
        jQuery.extend({
            stringify: function stringify(obj) {
                if ("JSON" in window) {
                    return JSON.stringify(obj);
                }

                var t = typeof (obj);
                if (t != "object" || obj === null) {
                    // simple data type
                    if (t == "string") obj = '"' + obj + '"';

                    return String(obj);
                } else {
                    // recurse array or object
                    var n, v, json = [], arr = (obj && obj.constructor == Array);

                    for (n in obj) {
                        v = obj[n];
                        t = typeof(v);
                        if (obj.hasOwnProperty(n)) {
                            if (t == "string") {
                                v = '"' + v + '"';
                            } else if (t == "object" && v !== null){
                                v = jQuery.stringify(v);
                            }

                            json.push((arr ? "" : '"' + n + '":') + String(v));
                        }
                    }

                    return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}");
                }
            }
        });
    }

    return $.stringify(aData);
}


/**
 * FileOption
 * 파일옵션 class - 파일첨부 옵션 하나당 하나씩
 * @author 백충덕 <cdbaek@simplexi.com>
 */
var FileOption = function(sInputId, aParam)
{
    this.aOpt = {
        inputId: sInputId,
        name: null,
        maxLen: null,
        maxSize: null,
        btnDel: '<a href="#none"><img src="//img.echosting.cafe24.com/skin/base_ko_KR/common/btn_attach_close.gif" /></a>',
        btnDelSelector: 'a',
        eInputFile: null
    };

    $.extend(this.aOpt, aParam);

    var self = this;

    /**
     * 초기화
     */
    this.init = function()
    {
        self.aOpt.eInputFile = $('#'+self.aOpt.inputId);

        // 지정된 id를 가진 input file이 없을 경우
        if (!self.aOpt.eInputFile) return false;

        // 파일리스트 목록 초기화
        var aFileListContainer = self._getFileListContainer(self.aOpt.inputId);
        if (aFileListContainer.length < 1) {
            self.aOpt.eInputFile.parent().append('<ul id="'+self._getFileListContainerId(self.aOpt.inputId)+'"></ul>');
            aFileListContainer = self._getFileListContainer(self.aOpt.inputId);
        }

        // 모바일의 경우 삭제버튼 변경
        if (self._isMobileBrowser()===true) {
            self.aOpt.btnDel = '<button type="button" class="btnDelete">' + __('삭제') + '</button></li>';
            self.aOpt.btnDelSelector = 'button.btnDelete';
        }

        // 삭제버튼 이벤트 핸들러 세팅
        aFileListContainer.delegate(this.aOpt.btnDelSelector, 'click', function() {
            $(this).parent().remove();
            return false;
        });
    };

    /**
     * 파일 입력폼을 초기화
     * @param jQuery eFile 파일 입력폼
     */
    this.resetFileInput = function(eFile)
    {
        // MSIE
        if (navigator.appVersion.indexOf('MSIE') > -1) {
            eFile.replaceWith(eFile = eFile.clone(true));
        } else {
            eFile.val('');
        }
    };

    /**
     * input:file change 이벤트 핸들러
     * @param object eFileInput change이벤트가 발생한 input:file
     */
    this.onChange = function(eFileInput)
    {
        var eFile = $(eFileInput);

        // 업로드 파일명
        var sFileName = this._getFileName(eFile.val());
        if (sFileName.length<1) return false;

        var eFileList = this._getFileListContainer(eFile.attr('id'));

        // 첨부파일 최대 갯수 제한
        var iCntFile = eFileList.find('li').length;
        if (iCntFile >= this.aOpt.maxLen) {
            if (eFile.val().length>0) alert(sprintf(__('첨부파일은 최대 %s개까지만 업로드 가능합니다.'), self.aOpt.maxLen));
            this.resetFileInput(eFile);
            return false;
        }

        // 업로드 파일리스트 추가
        var eFileItem = $('<li>'+sFileName+' '+this.aOpt.btnDel+'</li>');
        var sId = eFile.attr('id');
        var sRequire = eFile.attr('require');
        var sAccept = eFile.attr('accept');

        // IE8 이하에서는 display가 바뀌어도 onChange가 trigger되므로 onChange 제거
        eFile.get(0).onchange = null;

        eFile.css('display', 'none');
        eFile.attr({
            id: '',
            name: this.aOpt.inputId+'[]'
        });
        eFileItem.append(eFile);
        eFileList.append(eFileItem);

        // 새 파일업로드 input 배치
        var eFileNew = $('<input type="file" onchange="FileOptionManager.onChange(this)"/>');
        eFileNew.attr({
            id:      sId,
            name:    sId,
            require: sRequire,
            accept:  sAccept
        });
        eFileList.parent().prepend(eFileNew);

        // 업로드 가능한 파일인지를 비동기로 확인
        this.checkUpload(sFileName, eFileItem, String(sAccept));
    };

    /**
     * 파일업로드 전 체크
     * @param string sFileName 파일명
     * @param jQuery eFileItem 파일 첨부
     * @param string sAccept accept 속성값 (.jpg,.jpeg,.gif)
     */
    this.checkUpload = function(sFileName, eFileItem, sAccept)
    {
        var self = this;
        var sFileExtension = sFileName.replace(/^.+\.([^.]+)$/, '$1');
        if ($.inArray('.' + sFileExtension, sAccept.split(',')) > -1) {
            // accept 속성에 포함된 확장자인 경우 확인 안함
            return;
        }

        $.ajax({
            url: "/api/product/fileupload/",
            method: "GET",
            data: {
                cmd: "check_upload",
                file_extension: sFileExtension
            },
            dataType: "json",
            success: function(result) {
                if (result && result.err) {
                    eFileItem.find(self.aOpt.btnDelSelector).click();
                    alert(result.err);
                }
            }
        });
    }

    /**
     * 유효성 체크
     * @return bool 유효하면 true, 아니면 false
     */
    this.checkValidation = function()
    {
        // 파일첨부 옵션이 '필수'가 아닐 경우 OK
        if (self.aOpt.eInputFile.attr('require') !== 'T') return true;

        // 파일첨부 옵션이 '필수'인데 업로드 선택 파일이 없을 경우
        if (self.existsFileUpload()===false) {
            alert(self.aOpt.name+' '+__('파일을 업로드 해주세요.'));
            self.aOpt.eInputFile.focus();
            return false;
        }

        return true;
    };

    /**
     * 업로드 해야할 input:file 리스트 반환
     * @return array 업로드 해야할 input:file 리스트
     */
    this.getInputFileUpload = function()
    {
        return self._getFileListContainer(self.aOpt.inputId).find('input:file:hidden');
    };

    /**
     * 업로드 해야할 input:file이 있는지 여부 체크
     * @return bool 업로드 해야할 input:file이 있으면 true, 없으면 false
     */
    this.existsFileUpload = function()
    {
        return self.getInputFileUpload().length > 0;
    };

    /*
     * 파일업로드 리스트를 담을 노드 반환
     * @param string sSuffix
     * @return element
     */
    this._getFileListContainer = function(sSuffix)
    {
        var sFileListId = self._getFileListContainerId(sSuffix);

        return $('ul[id="'+sFileListId+'"]');
    };

    /**
     * 파일업로드 리스트를 담을 노드의 ID 반환
     * @param string sSuffix id로 사용할 suffix
     * @return string 노드의 ID
     */
    this._getFileListContainerId = function(sSuffix)
    {
        return 'ul_'+sSuffix;
    };

    /**
     * 파일 경로에서 파일명만 추출
     * @param string sFilePath 파일 경로
     * @return mixed 추출된 파일명 반환, 실패시 false 반환
     */
    this._getFileName = function(sFilePath)
    {
        sFilePath = $.trim(sFilePath);
        if (sFilePath.length<1) return false;

        return $.trim(sFilePath.split('/').pop().split('\\').pop());
    };

    /**
     * 모바일 브라우저인지 체크
     * @return bool 모바일 브라우저이면 true, 아니면 false 반환
     */
    this._isMobileBrowser = function()
    {
        // 전역 isMobile 변수가 세팅되어있을 경우 isMobile 변수값 반환
        if (typeof isMobile != 'undefined') {
            return isMobile;
        // 전역 isMobile 변수가 없을 경우 location.hostname으로 판별
        } else {
            return location.hostname.indexOf('m.')===0;
        }
    };

    /**
     * 부모창 - 자식창 파일 리스트 복사
     */
    this.sync = function(inputId, targetUl)
    {
        self.aOpt.eInputFile = $('#'+inputId);
        // 파일리스트 목록
        var aFileListContainer = self._getFileListContainer(inputId);
        // 추가된 파일 리스트 없을 경우 처리안함
        if (aFileListContainer.find('li').length < 1) return false;
        // 파일리스트 복사
        targetUl.append(aFileListContainer.find('li'));


    };
}

/**
 * FileOptionManager
 * 파일옵션 객체를 관리하는 class - 페이지 내의 파일첨부 옵션 전체를 관장
 * @author 백충덕 <cdbaek@simplexi.com>
 */
var FileOptionManager = {
    bIsInputFileSupport: null,
    /**
     * FileOption 객체 리스트
     * @var object
     */
    aList: {},

    /**
     * 초기화
     *   - FileOptionManager.add()를 통해 추가된 FileOption 객체 초기화 처리
     */
    init: function()
    {
        for (var sId in this.aList) {
            if (this.aList.hasOwnProperty(sId)===false) continue;

            // 초기화 과정에 문제가 생긴 객체는 리스트에서 제거
            if (this.aList[sId].init() === false) delete this.aList[sId];
        }
    },

    /**
     * 파일업로드용 input:file의 change 이벤트 핸들러
     * @param object eFileInput change 이벤트가 발생한 input:file
     */
    onChange: function(eFileInput)
    {
        var sId = eFileInput.id;
        this.aList[sId].onChange(eFileInput);
    },

    /**
     * 리스트에 sInputId, aOpt 파라메터로 생성한 FileOption 객체 추가
     * @param string sId 고유 ID (input:file의 id로도 쓰임)
     * @param object aOpt 생성 파라메터
     */
    add: function(sId, aOpt)
    {
        this.aList[sId] = new FileOption(sId, aOpt);
    },

    /**
     * 업로드해야 할 input:file이 있는지 체크
     * @param mixed mId 업로드 해야할 파일이 있는지 체크할 FileOption id. 없거나 하나 혹은 여러개.
     * @return bool 파일업로드가 있으면 true, 아니면 false
     */
    existsFileUpload: function(mId)
    {
        var aId = this._getList(mId);

        for (var i=0; i<aId.length; i++) {
            var sId = aId[i];

            // 업로드해야 할 파일 있음
            if (this.aList[sId].existsFileUpload() === true) return true;
        }

        return false;
    },

    /**
     * 유효성 체크
     * @param mixed mId 유효성 체크할 FileOption id. 없거나 하나 혹은 여러개.
     * @return bool 유효하면 true, 아니면 false
     */
    checkValidation: function(mId)
    {
        var aId = this._getList(mId);

        // 유효성 체크
        for (var i=0; i<aId.length; i++) {
            var sId = aId[i];

            if (this.aList[sId].checkValidation() === false) return false;
        }

        return true;
    },

    /**
     * 파일첨부 옵션 업로드 실행
     * @param mixed mId 파일업로드를 실행할 FileOption id. 없거나 하나 혹은 여러개.
     * @param function callback 파일업로드 완료 후 실행할 callback
     */
    upload: function(mId, callback)
    {
        var self = this;

        // mId 지정하지 않음
        if (typeof mId === 'function') {
            callback = mId;
            mId = null;
        }
        var aId = this._getList(mId);

        // 업로드 해야할 input:file 추출
        var aFile = [];
        var aMaxSize = {};
        for (var i=0; i<aId.length; i++) {
            var sId = aId[i];
            aMaxSize[sId] = this.aList[sId].aOpt.maxSize;

            this.aList[sId].getInputFileUpload().each(function(idx){
                var sVal = $.trim($(this).val());
                if (sVal.length < 1) return;

                aFile.push({
                    eFile: $(this),
                    eParent: $(this).parent()
                });
            });
        }

        // 업로드 할 파일이 없을 경우 중지 (업로드는 성공했다고 반환)
        if (aFile.length < 1) {
            callback(true);
            return true;
        }

        var sTargetName = 'iframe_add_option_file_upload';
        var sAction     = '/api/product/fileupload/';

        // form
        var form = $('<form action="'+sAction+'" method="post" enctype="multipart/form-data" style="display:none;" target="'+sTargetName+'"></form>');
        $('body').append(form);
        // 업로드할 input:file append
        for (var i=0; i<aFile.length; i++) {
            aFile[i].eFile.appendTo(form);
        }

        // 커맨드 지정
        $('<input type="hidden" name="cmd" value="upload" />').prependTo(form);
        // 파일 업로드 사이즈 한계
        $('<input type="hidden" name="max_size" value="'+encodeURIComponent(JSON_stringify(aMaxSize))+'" />').prependTo(form);

        // iframe
        var iframe = $('<iframe src="javascript:false;" name="'+sTargetName+'" style="display:none;"></iframe>');
        $('body').append(iframe);

        // iframe onload(form.submit response) 이벤트 핸들러
        iframe.load(function(){
            var doc = this.contentWindow ? this.contentWindow.document : (this.contentDocument ? this.contentDocument : this.document);
            var root = doc.documentElement ? doc.documentElement : doc.body;
            var sResult = root.textContent ? root.textContent : root.innerText;
            var aResult = $.parseJSON(sResult);
            var mReturn = false;

            if (typeof aResult==='object') {
                // 업로드 성공
                if (aResult.err=='') {
                    // 업로드 성공한 파일정보를 가져와 input:hidden의 value로 저장
                    for (var sId in aResult.files) {
                        var eInputHidden = $('#'+sId+'_hidden');
                        var aVal = {
                            title: self.aList[sId].aOpt.name,
                            files: []
                        };
                        for (var i=0; i<aResult.files[sId].length; i++) {
                            aVal.files.push({
                                path: aResult.files[sId][i].path,
                                name: aResult.files[sId][i].name
                            });
                        }

                        eInputHidden.val(encodeURIComponent(JSON_stringify(aVal)));

                        // 반환값 세팅
                        if (mReturn===false) mReturn = {};
                        mReturn[sId] = aVal;
                    }
                // 업로드 실패
                } else {
                    alert(aResult.err);
                }
            }

            // file element 원래 위치로 이동
            for (var i=0; i<aFile.length; i++) {
                aFile[i].eFile.appendTo(aFile[i].eParent);
            }

            // 임시 element 삭제
            form.remove();
            iframe.remove();

            callback(mReturn);
        });

        // 파일전송
        form.submit();
    },

    /**
     * 브라우저가 input file 지원여부 반환
     * @return bool input file 지원시 true, 아니면 false
     */
    isInputFileSupport: function()
    {
        if (this.bIsInputFileSupport===null) {
            this.bIsInputFileSupport = true;

            try {
                var eInputFile = document.createElement('input');
                eInputFile.type = 'file';
                eInputFile.style.display = 'none';
                document.getElementsByTagName('body')[0].appendChild(eInputFile);

                if (eInputFile.disabled) this.bIsInputFileSupport = false;
            } catch (e) {
                this.bIsInputFileSupport = false;
            } finally {
                if (eInputFile) eInputFile.parentNode.removeChild(eInputFile);
            }
        }

        return this.bIsInputFileSupport;
    },

    // 파라메터로 넘기기 위해 인코딩
    encode: function(sVal)
    {
        return encodeURIComponent(JSON_stringify(sVal)).replace(/'/g, "%27");
    },

    /**
     * 넘겨받은 id에 해당하는 유효한 FileOption id 리스트 반환
     * @param mixed mId 리스트로 추출할 FileOption id. 없거나 하나 혹은 여러개.
     * @return array 유효한 FileOption id 리스트
     */
    _getList: function(mId)
    {
        var aId = [];

        // 지정한 id가 없다면 전체대상
        if (!mId) {
            for (var sId in this.aList) {
                if (this.aList.hasOwnProperty(sId)===false) continue;

                aId.push(sId);
            }
        // 지정한 id가 문자열 하나
        } else if (typeof mId === 'string') {
            aId.push(mId);
        // 지정한 id가 Array(object)
        } else {
            aId = mId;
        }

        // 뭔가 문제가 있을 경우 빈 배열 반환
        if ($.isArray(aId)===false || aId.length<1) return [];

        // 유효한 id만 추출
        var sId = '';
        var aResult = [];
        for (var i=0; i<aId.length; i++) {
            sId = aId[i];
            if (!(sId in this.aList)) continue;

            aResult.push(sId);
        }

        return aResult;
    },

    /**
     * 부모창 - 자식창 파일 리스트 복사
     */
    sync: function(sId, target)
    {
        this.aList[sId].sync(sId, target);
    }
};

var SET_OPT_CLASS_PREFIX = "SetProductOption";
var SET_ADDOPT_CLASS_PREFIX = "SetProductAddOption";

/**
 * 뉴상품 세트상품 상품옵션변경
 */
var NewWishSetOption = {
    /**
     * '옵션변경'레이어에서 '적용하기' 버튼 클릭
     * @param int iIdx 품목정보배열 index
     * @param int iChildIdx 세트 자식품목정보배열 index
     * @param string sMode 액션모드(modify: 변경, add: 추가)
     */
    modify : function(iIdx, iChildIdx)
    {
        // 사용자지정옵션인경우 옵션변경불가(기존사양)
        // if (aWishlistProductData[iIdx].option_add == "T") {
        //     alert(__("사용자 지정 옵션 상품은 옵션변경을 하실 수 없습니다."));
        //     $('#quantity_id_'+i).val(aWishlistProductData[iIdx].quantity);
        //     return false;
        // }

        //필수옵션 체크
        if (this.checkOptionRequired(iIdx, iChildIdx) == false) return;

        //추가옵션 체크
        if (this.checkAddOption(iIdx, iChildIdx) == false) return;

        // 해당옵션
        var iWishIdx = aWishlistProductData[iIdx].wish_list_idx;
        var oPrdData = aWishProductSetData[iWishIdx][iChildIdx];

        // 오직 추가옵션만 있는지
        var isOnlyOptionAdd = false;
        if (oPrdData.has_option == "F" && oPrdData.has_option_add == "T") {
            isOnlyOptionAdd = true;
        }
        // 상품번호
        var iProductNo = oPrdData.product_no;

        // 품목코드
        var sItemCode = oPrdData.item_code;

        // 수량
        var iQuantity = oPrdData.qty;

        // 품목코드 추출
        var oItemInfo = this.getItemInfo(iIdx, iChildIdx, oPrdData, isOnlyOptionAdd);

        // 선택옵션인경우만 체크
        if (isOnlyOptionAdd == false) {
            // 재고정보 추출
            var sKey = "option_stock_data" + iProductNo;
            var oItemStock = $.parseJSON(window[sKey]);

            // 재고체크
            var oItem = oItemStock[oItemInfo.item_code];
            if (oItem.use_stock === true) {
                if (oItem.is_selling == "F") {
                    alert(__('재고 수량이 부족합니다.'));
                    return false;
                }
            }
        }

        // 동일품목 추가여부 확인
        var sClassName    = SET_ADDOPT_CLASS_PREFIX + iIdx;
        var iCntAddOption = $("input[class^='" + sClassName + "']:visible").length;
        if ((sItemCode == oItemInfo.item_code) && iCntAddOption == 0) {
            alert(__('이미 등록되어 있습니다.'));
            return false;
        }

        // 추가입력 옵션 가져오기
        var aAddOptionName = [];
        var aAddOption     = [];
        $("input[class^='" + sClassName + "']:visible").each(function() {
            aAddOptionName.push($(this).attr("optionname"));
            aAddOption.push($(this).val());
        });

        // 옵션변경
        var aParams = [];
        aParams.push("command=update");
        aParams.push("is_set_product=" + "T");
        aParams.push("wish_idx=" + iWishIdx);
        aParams.push("product_no=" + oItemInfo.product_no);
        aParams.push("item_code=" + oItemInfo.item_code);
        aParams.push("item_code_before=" + oPrdData.item_code);
        aParams.push("quantity=" + iQuantity);
        aParams.push("opt_str=" + oItemInfo.opt_str);
        aParams.push("add_option_name=" + aAddOptionName.join(";"));

        for (var i = 0, length = aAddOption.length; i < length; i++) {
            aParams.push("option_add[]=" + aAddOption[i]);
        }

        // action
        action_wishlist(aParams.join("&"), "wishlist");
    },

    /**
     * 필수옵션 체크 여부
     * @param int iIdx 품목정보배열 index
     * @param int iChildIdx 세트 자식품목정보배열 index
     * @return bool true: 체크 / false: 체크안함
     */
    checkOptionRequired : function(iIdx, iChildIdx)
    {
        var bIsChcecked = true;
        var sClassName = SET_OPT_CLASS_PREFIX + iIdx + '-' + iChildIdx;
        $("select[class*='" + sClassName + "']:visible").each(function() {
            if ($(this).attr('required')) {
                if ($('option:selected', this).val().indexOf('*') > -1) {
                    alert(__('필수 옵션을 선택해주세요.'));
                    $(this).focus();
                    bIsChcecked = false;
                    return false;
                }
            }
        });

        return bIsChcecked;
    },


    /**
     * 추가옵션 체크
     * @return bool true: 추가옵션이 다 입력되었으면 / false: 아니면
     * @param int iIdx 품목정보배열 index
     * @param int iChildIdx 세트 자식품목정보배열 index
     * @return boolean
     */
    checkAddOption: function(iIdx, iChildIdx)
    {
        var bIsChcecked = true;
        var sClassName = SET_ADDOPT_CLASS_PREFIX + iIdx;
        $("[class^='" + sClassName + "']:visible").each(function() {
            if ($(this).attr("require") == "T") {
                if ($(this).val().replace(/^[\s]+[\s]+$/g, '').length == 0) {
                    alert(__('추가 옵션을 입력해주세요.'));
                    $(this).focus();
                    bIsChcecked = false;
                    return false;
                }
            }
        });

        return bIsChcecked;
    },

    /**
     * 뉴상품의 경우 아이템 코드를 받아오는 로직
     * @param int iIdx 품목정보배열 index
     * @param int iChildIdx 세트 자식품목정보배열 index
     * @param int iProductNo 상품번호
     */
    getItemInfo : function(iIdx, iChildIdx, oPrdData, isOnlyOptionAdd)
    {
        var sClassName = SET_OPT_CLASS_PREFIX + iIdx + '-' + iChildIdx;
        var oItemInfo = {
            "product_no": oPrdData.product_no,
            "item_code": "",
            "opt_id": "",
            "opt_str": ""
        };

        // 오직 추가옵션만 있는경우 임의 가공
        if (isOnlyOptionAdd) {
            oItemInfo.item_code = oPrdData.product_code + "000A";
            oItemInfo.opt_id = "000A";
            return oItemInfo;
        }


        if (eval("item_listing_type" + oPrdData.product_no) == "C") {
            oItemInfo.item_code = $("." + sClassName + ":visible").val();
            oItemInfo.opt_str = $("." + sClassName + " :selected").text();
            oItemInfo.opt_str = oItemInfo.opt_str.replace(/\-/g, "/");
        } else {
            var aItemValue = [];
            $("select[class*='" + sClassName + "']:visible").each(function() {
                aItemValue.push($(this).val());
            });
            var aItemMapper = $.parseJSON(eval("option_value_mapper" + oPrdData.product_no));
            oItemInfo.item_code = aItemMapper[aItemValue.join("#$%")];
            oItemInfo.opt_str = aItemValue.join("/");
        }
        oItemInfo.opt_id = oItemInfo.item_code.substr(8);

        return oItemInfo;
    }
};
var categoryOddColor = new Object();
var categoryEvenColor = new Object();

$(document).ready(function()
{
    // 카테고리타입
    var aCategoryType = new Array('normal', 'reco', 'new', 'project', 'main');
    // 상품 ID prefix
    var sProductIdPrefix = 'product_';
    // 옵션 미리보기 아이콘 ID prefix
    var sOptPreviewIconId = 'opt_prv_id_';
    // 옵션 미리보기 레이어 ID prefix
    var sOptPreviewLayerId = 'opt_prv_layer_id_';
    // 옵션 미리보기 닫기 버튼 ID prefix
    var sOptPreviewCloseId = 'opt_prv_close_id_';

    // 상품요약정보 (툴팁)
    if ($('.tooltip').length > 0 && $.fn.Tooltip) {
        $('.tooltip').Tooltip({
            'name' : 'toolTipStyle',
            'delay' : '0',
            'top' : '-200',
            'left' : '10',
            'fade' : false,
            'opacity' : 1
        });
    }

    /**
     * 카테고리 타입별로 홀짝수 라인색상 설정
     */
    var iCategoryTypeLen = aCategoryType.length;
    for ( var i = 0 ; i < iCategoryTypeLen ; i++) {
        var iBeforeOffsetTop = -1;
        var sCategoryType = aCategoryType[i];
        var sBgColor = categoryOddColor[sCategoryType];
        $('[id^="' + sProductIdPrefix + aCategoryType[i] + '_"]').each(function(idx)
        {
            if ((idx > 0) && $(this).attr('offsetTop') != iBeforeOffsetTop) {
                sBgColor = (sBgColor == categoryOddColor[sCategoryType]) ? categoryEvenColor[sCategoryType] : categoryOddColor[sCategoryType];
            }
            iBeforeOffsetTop = $(this).attr('offsetTop');
            $(this).css('background-color',sBgColor);
        });
    }

    $('#selArray').change(function(){
        location.href = $(this).val();
    });

    var sSortName = CAPP_SHOP_FRONT_COMMON_UTIL.getParameterByName('sort_method');

    if (sSortName !== '') {

        if (sSortName.indexOf('#Product_ListMenu') < 0 ) {
            sSortName = sSortName + '#Product_ListMenu';
        }

        $('#selArray>option').each( function() {
            if ($(this).val().indexOf(sSortName) > 0 ) {
                $(this).attr("selected","true");
            }
        });
    }


    /**
     * 옵션아이콘 onmouseover 핸들러
     */
    $('[id^="' + sOptPreviewIconId + '"]').mouseover(function()
    {
        if (sOptionPreviewMethod.indexOf('mouseover') > -1)
            setOptLayerDisplay($(this));
    });

    /**
     * 옵션아이콘 onmouseclick 핸들러
     */
    $('[id^="' + sOptPreviewIconId + '"]').click(function()
    {
        if (sOptionPreviewMethod.indexOf('mouseclick') > -1)
            setOptLayerDisplay($(this));
    });

    /**
     * 옵션 하나만 선택가능 옵션 동작
     */
    try {
        $('[name="item_code[]"]').live('click', function () {
            if ($.data(document, 'sUseOptionOne_class') === 'T') {
                if ($('input[name="item_code[]"][option_name="' + $(this).attr('option_name') + '"]:checked').length > 1) {
                    alert(__('옵션별로 1개 씩만 선택 가능한 상품입니다.'));
                    $(this).attr('checked', false);
                }

            }
        });
    } catch (e) {};
    /**
     * 옵션 레이어 display 조절
     *
     * @param object optIcon 옵션 아이콘 JQuery 객체
     * @param string sPopupMethod 팝업 method (mouseover|mouseclick)
     */
    function setOptLayerDisplay(optIcon, sPopupMethod)
    {
        var aParam = getOptionParams(optIcon.attr('id'),sOptPreviewIconId);
        // 모든 옵션미리보기창 닫기
        $('[id^="' + sOptPreviewLayerId + '"]').each(function()
        {
            $(this).css('display','none');
        });

        // 선택된 옵션미리보기창 출력
        var sLayerId = '#' + sOptPreviewLayerId + aParam['product_no'];
        var aPos = findPos(optIcon.get(0));
        $(sLayerId).css('position','absolute');
        $(sLayerId).css('left',aPos['left']);
        $(sLayerId).css('top',(aPos['top'] + optIcon.attr('offsetHeight')) + 'px');
        $(sLayerId).css('display','');
        $(sLayerId).css('z-index','9999');
    }

    /**
     * 옵션아이콘 onmouseout 핸들러
     */
    $('[id^="' + sOptPreviewIconId + '"]').mouseout(function()
    {
        var aParam = getOptionParams($(this).attr('id'),sOptPreviewIconId);
        if (sOptionLayerCloseMethod != 'use_close_button')
            $('#' + sOptPreviewLayerId + aParam['product_no']).css('display','none');
    });

    /**
     * 옵션 레이어 onmouseover 핸들러
     */
    $('[id^="' + sOptPreviewLayerId + '"]').mouseover(function()
    {
        $(this).css('display','');
    });

    /**
     * 옵션 레이어 onmouseout 핸들러
     */
    $('[id^="' + sOptPreviewLayerId + '"]').mouseout(function()
    {
        if (sOptionLayerCloseMethod != 'use_close_button')
            $(this).css('display','none');
    });

    /**
     * 옵션 레이어 닫기버튼 클릭 핸들러
     */
    $('[id^="' + sOptPreviewCloseId + '"]').click(function()
    {
        var aParam = getOptionParams($(this).attr('id'),sOptPreviewCloseId);
        $('#' + sOptPreviewLayerId + aParam['product_no']).css('display','none');
    });

    /**
     * HTML 오브젝트의 위치값 계산
     *
     * @param object obj 위치를 알고자 하는 오브젝트
     * @return object left, top 값
     */
    function findPos(obj)
    {
        var iCurLeft = iCurTop = 0;

        if (obj.offsetParent) {
            do {
                iCurLeft += obj.offsetLeft;
                iCurTop += obj.offsetTop;
            } while (obj = obj.offsetParent);
        }

        return {
            'left' : iCurLeft,
            'top' : iCurTop
        };
    }

    /**
     * 옵션관련 ID를 파싱해서 파라메터 추출, 반환
     *
     * @param string sId ID
     * @param string sPrefix 파싱할 때 삭제할 prefix
     * @return array 상품번호+팝업method
     */
    function getOptionParams(sId, sPrefix)
    {
        var aTmp = sId.replace(sPrefix,'').split('_');
        return {
            'product_no' : aTmp[0],
            'popup_method' : aTmp[1]
        };
    }

    // 할인기간 레이어 열기
    $('.shippingFee').delegate('.deliveryBenefitDetailInfo', 'click', function() {
        var oLayerDiscountDelivery = $(this).parent();

        if (oLayerDiscountDelivery.attr('benefitinfoLoaded') === undefined) {

            var iProductNo = $(this).attr("productno");
            var sBenefitType = $(this).attr("benefit_type");

            var oHtml = $('<div>');
            oHtml.addClass('ec-base-tooltip');
            oHtml.addClass('wrap');
            $(this).parent().append(oHtml);

            $.post('/exec/front/Product/Benefitinfo', 'benefit_type='+sBenefitType+'&product_no=' + iProductNo, function(sHtml) {
                oHtml.html(sHtml);
                oLayerDiscountDelivery.attr('benefitinfoLoaded', true);
            });
        }

        oLayerDiscountDelivery.find('div.ec-base-tooltip').show();
        oLayerDiscountDelivery.find('span.arrow').show();

        return false;
    });


    // 할인기간 레이어 열기
    $('.discountPeriod > a').mouseover(function() {
        $('.layerDiscountPeriod').hide();
        $(this).parent().find('.layerDiscountPeriod').show();
    }).mouseout(function() {
        $('.layerDiscountPeriod').hide();
    });

    // 차등 배송비 사용시 ToolTip 열기
    try {
        $('.btnTooltip > a').live('click',function() {
           $('.btnTooltip > .differentialShipping').show();
        });
    } catch (e) {};
    // 차등 배송비 사용시 ToolTip 닫기
    $('.btnTooltip > .differentialShipping a').unbind().click(function() {
        $('.btnTooltip > .differentialShipping').hide();
    });


    // 배송비정보 레이어 닫기
    try {
        $('.ec-base-tooltip > .close').live("click",function() {
            $(this).parents('.ec-base-tooltip').hide();
            $(this).parents('.differentialShipping').hide();
            return false;
        });
    } catch (e) {};

    // 배송비정보 레이어 닫기
    try {
        $('.differentialShipping > .close > a').live("click",function() {
            $(this).parents('.differentialShipping').hide();
        });
    } catch (e) {};

    COLORCHIPLIST.init();
    CAPP_PRODUCT_LIST_WISHICON.init();

});

var CAPP_PRODUCT_LIST_WISHICON = {
    iDuplicateSecond : 2000, //중복 클릭 제한시간
    iClickCount : 0,
    iRecentClickProductNo : 0,
    iTimeoutId: 0, // 중복방지 대기시간 실행 시퀀스 번호
    init : function()
    {
        var iProductNo = 0;
        var iCategoryNo = 0;
        var oObj = null;
        var sLogin = '';
        var bIsIndividualSetProduct = false;
        try {
            $('.ec-product-listwishicon').live('click', function () {
                oObj = $(this);
                iProductNo = parseInt(oObj.attr('productno'));
                iCategoryNo = oObj.attr('categoryno');
                sLogin = oObj.attr('login_status');
                bIsIndividualSetProduct = oObj.attr('individual-set') === 'T';

                if (sLogin !== 'T') {
                    alert(__('로그인 후 관심상품 등록을 해주세요.'));
                    location.href = '/member/login.html?returnUrl=' + encodeURIComponent(location.href);
                    return;
                }


                if (CAPP_PRODUCT_LIST_WISHICON.iRecentClickProductNo === iProductNo) {
                    if (CAPP_PRODUCT_LIST_WISHICON.iClickCount === 1) {
                        CAPP_PRODUCT_LIST_WISHICON.iClickCount++;
                        CAPP_PRODUCT_LIST_WISHICON.initCount();
                    } else if (CAPP_PRODUCT_LIST_WISHICON.iClickCount > 1) {
                        return;
                    }
                } else {
                    CAPP_PRODUCT_LIST_WISHICON.iClickCount = 0;
                    CAPP_PRODUCT_LIST_WISHICON.iRecentClickProductNo = iProductNo;
                    if (CAPP_PRODUCT_LIST_WISHICON.iTimeoutId > 0) {
                        clearTimeout(CAPP_PRODUCT_LIST_WISHICON.iTimeoutId);
                    }
                }

                // DB 처리전 카운트를 해야 정확히 중복체크가능
                CAPP_PRODUCT_LIST_WISHICON.iClickCount++;

                if (oObj.attr('icon_status') === 'on') {
                    sCommand = 'del';
                } else {
                    sCommand = 'add';
                }

                var sUrl = '/exec/front/Product/Wishlist/';
                var sParam = 'command=' + sCommand + '&from=wish_icon';
                sParam += '&referer=' + encodeURIComponent('//' + location.hostname + location.pathname + location.search);
                sParam += '&product_no=' + iProductNo + '&cate_no=' + iCategoryNo;
                if (bIsIndividualSetProduct === true) {
                    sParam += '&set_product=T';
                }

                $.post(
                    sUrl,
                    sParam,
                    function (data) {
                        CAPP_PRODUCT_LIST_WISHICON.getResultWishIconAjax(data, oObj);
                    },
                    'json');
            });
        } catch (e) {};
    },

    /**
     * 클릭후 시간체크
     */
    initCount: function()
    {
        CAPP_PRODUCT_LIST_WISHICON.iTimeoutId = setTimeout(function() {
            CAPP_PRODUCT_LIST_WISHICON.iClickCount = 0;
        }, CAPP_PRODUCT_LIST_WISHICON.iDuplicateSecond);
    },

    getResultWishIconAjax : function(aData, oObj)
    {
        var STORAGE_KEY = 'localWishList' +  EC_SDE_SHOP_NUM;
        if (aData == null) return;
        if (aData.result == 'SUCCESS') {
            var iProductNo = $(oObj).attr('productno');

            $('.ec-product-listwishicon[productno="'+iProductNo+'"]').each(function() {
                var oStorageData = $.parseJSON(sessionStorage.getItem(STORAGE_KEY));
                if ($(this).attr('icon_status') === 'off') {
                    var src = aData.data.wish_icon.on;
                    var alt = aData.data.wish_alt.on;
                    if (oStorageData !== null && oStorageData.hasOwnProperty('on_tags') === true) {
                        src = oStorageData.on_tags.src;
                        alt = oStorageData.on_tags.alt;
                    }
                    $(this).attr('src', src);
                    $(this).attr('alt', alt);
                    $(this).attr('icon_status', 'on');
                } else {
                    var src = aData.data.wish_icon.off;
                    var alt = aData.data.wish_alt.off;
                    if (oStorageData !== null && oStorageData.hasOwnProperty('off_tags') === true) {
                        src = oStorageData.off_tags.src;
                        alt = oStorageData.off_tags.alt;
                    }
                    $(this).attr('src', src);
                    $(this).attr('alt', alt);
                    $(this).attr('icon_status', 'off');
                }
            });

            if (CAPP_ASYNC_METHODS.hasOwnProperty('WishList') === true) {
                // 관심상품 추가/삭제시 sessionStorage 추가/삭제 처리
                CAPP_ASYNC_METHODS.WishList.setSessionStorageItem(iProductNo, sCommand);
            }

            if (CAPP_ASYNC_METHODS.hasOwnProperty('Wishcount') === true) {
                CAPP_ASYNC_METHODS.Wishcount.restoreCache();
                CAPP_ASYNC_METHODS.Wishcount.execute();
            }

            if (sCommand === 'add') { // 위시리스트 등록시에만 실행
                EC_PlusAppBridge.addWishList(iProductNo);
            }

        } else if (aData.result == 'ERROR') {
            alert(__('실패하였습니다.'));
        } else if (aData.result == 'NOT_LOGIN') {
            alert(__('회원 로그인 후 이용하실 수 있습니다.'));
        } else if (aData.result == 'INVALID_REQUEST') {
            alert(__('파라미터가 잘못되었습니다.'));
        }
    }
};

//컬러칩 이미지 변경(상품리스트)
var COLORCHIPLIST = {
    init : function() {
        var sSelector = '';
        if (mobileWeb === false) {
            sSelector = 'div.color > .chips';
        } else {
            sSelector = '.xans-product-colorchip .chips';
        }
        try {
            $(sSelector).live('mouseover click touchstart', function() {
                var iColorNo = $(this).attr('color_no');
                var iDisplayGroup = $(this).attr('displayGroup');

                if (iColorNo != '') {
                    $(this).css('cursor', 'pointer');
                    COLORCHIPLIST.getImage(this, iColorNo, iDisplayGroup);
                }
            });
        } catch (e) {};
    },

    getImage : function(oObj, iColorNo, iDisplayGroup) {
        var sImageUrl = $.data($(oObj)[0], 'image');

        if (sImageUrl == undefined) {
            COLORCHIPLIST.getAjax(oObj, iColorNo, iDisplayGroup);
        } else {
            COLORCHIPLIST.setDisplayImage(oObj);
        }
    },

    getAjax : function(oObj, iColorNo, iDisplayGroup)
    {
        $.get(
            '/exec/front/Product/Colorimage',
            'iColorNo=' + iColorNo + '&iDisplayGroup=' + iDisplayGroup,
            function(sResponse) {
                if (sResponse != '') {
                    var oJson = $.parseJSON(sResponse);
                    $.data($(oObj)[0], 'image', oJson.sImageUrl);
                    $.data($(oObj)[0], 'displayGroup', oJson.iDisplayGroup);
                    $.data($(oObj)[0], 'product_no', oJson.iProductNo);
                    COLORCHIPLIST.setDisplayImage(oObj);
                }
            }
        );
    },

    setDisplayImage : function(oObj)
    {
        var iDisplayGroup = $.data($(oObj)[0], 'displayGroup');
        var iProductNo = $.data($(oObj)[0], 'product_no');
        var sImageUrl = $.data($(oObj)[0], 'image');

        var oEl = $('#eListPrdImage' + iProductNo + '_' + iDisplayGroup);
        oEl.attr('src', sImageUrl);


    }
};

// 상품 확대보기 아이콘 ID prefix
var sProductZoomIdPrefix = 'product_zoom_';

/**
 * 상품 확대보기
 *
 * @param int iProductNo 상품번호
 * @param int iCategoryNo 카테고리 번호
 * @param int iDisplayGroup display_group
 * @param string sLink 팝업창 URL
 * @param string sOption 팝업 옵션
 */
function zoom(iProductNo, iCategoryNo, iDisplayGroup, sLink, sOption)
{
    // 팝업창 링크
    var sLink = sLink ? sLink : '/product/image_zoom.html';
    sLink += '?product_no=' + iProductNo + '&cate_no=' + iCategoryNo + '&display_group=' + iDisplayGroup;
    // 팝업창 옵션
    var sOptions = sOption ? sOption : 'toolbar=no,scrollbars=no,resizable=yes,width=800,height=640,left=0,top=0';
    // 팝업창 이름
    var sWinName = 'image_zoom';

    window.open(sLink,sWinName,sOptions);
}

/**
 * 상품상세 확대보기
 *
 * @param int iProductNo 상품번호
 * @param int iCategoryNo 카테고리 번호
 * @param int iDisplayGroup display_group
 * @param string sLink 팝업창 URL
 * @param string sOption 팝업 옵션
 */
function zoom2(iProductNo, iCategoryNo, iDisplayGroup, sLink, sOption)
{
    // 팝업창 링크
    var sLink = sLink ? sLink : '/product/image_zoom2.html';
    sLink += '?product_no=' + iProductNo + '&cate_no=' + iCategoryNo + '&display_group=' + iDisplayGroup;
    // 팝업창 옵션
    var sOptions = sOption ? sOption : 'toolbar=no,scrollbars=no,resizable=yes,width=800,height=640,left=0,top=0';
    // 팝업창 이름
    var sWinName = 'image_zoom2';

    window.open(sLink,sWinName,sOptions);
}

/**
 * 상품 진열시 높이가 달라서 li가 깨지는 현상이 나타날때 이를 진열된 상품의 기준으로 높이를 다시 재설정해주는 스크립트입니다.
 * 이 스크립트는 반드시 고정폭에서 사용되어야 합니다.
 * 해당스크립트 실행문은 각각 모듈의 js에서 합니다.
 */
$.fn.productResize = function(nodeName) {
    nodeName = nodeName || 'li';

    return $(this).each(function() {
        var iTargetHeight = 0;
        var aTargetElement = new Array();
        var nodes = $(this).find(nodeName);
        var iFirstChildDepth = $(nodes[0]).parents().length; // 타겟 depth
        for (var x = 0 ; x < nodes.length ; x++) {
            if ($(nodes[x]).parents().length == iFirstChildDepth) {
                aTargetElement.push(x);
                if (iTargetHeight < $(nodes[x]).height()) {
                    iTargetHeight = $(nodes[x]).height();
                }
            }
        }
        for (var x in aTargetElement) {
            $(nodes[aTargetElement[x]]).height(iTargetHeight);
        }
    });
};
/**
 * 상품 리스트에서 쓰이는 기능 모음 1. 옵션 미리보기 2. 장바구니 넣기 3. 이미지 줌 4. 요약정보
 */
var EC_ListAction = {
    getOptionSelect : function(iProductNo, iCategoryNo, iDisplayGroup, sBasketType)
    {
        element = document;
        $('div.xans-product-basketoption').remove();
        $.get(basket_option,{
            'product_no' : iProductNo,
            'cate_no' : iCategoryNo,
            'display_group' : iDisplayGroup,
            'basket_type' : sBasketType
        },function(sHtml)
        {
            $('body').append($(sHtml.replace(/[<]script( [^ ]+)? src=\"[^>]*>([\s\S]*?)[<]\/script>/g,"")));
        });
    },
    getOptionSelectValidate : function(sType)
    {
        var iCheckCount = 0;
        var bReturn = true;
        var bFirst = true;
        var eLists = $('.xans-product-optionlist');
        var iProductMin = parseInt($.data(document,'ProductMin_class'),10);

        // 뉴상품인 경우에만 있는 데이터
        var iProductMax = parseInt($.data(document,'ProductMax_class'),10);
        var iBuyUnit = parseInt($.data(document,'ProductBuyUnit_class'),10);

        if (isNaN(iBuyUnit) === true) iBuyUnit = 1;
        if (isNaN(iProductMax) === true) iProductMax = 0;

        if ($.data(document,'BundlePromotion') === true) {
            iBuyUnit = 1;
            iProductMin = 1;
            iProductMax = 0;
        }

        var sOptionType = $.data(document, 'sOptionType_class');
        var aOptionName = $.parseJSON($.data(document, 'aOptionName_class'));
        if (sOptionType === 'F') {
            $(aOptionName).each(function(i){
                if ($('input[option_name="'+aOptionName[i]+'"]:checked').length == 0 && $('input[option_name="'+aOptionName[i]+'"]').attr('require') === 'T') {
                    alert(__('필수옵션은 반드시 1개 이상 선택하셔야 구매 또는 장바구니 담기가 가능합니다.'));
                    eOptionName.focus();
                    bReturn = false;
                    bFirst = false;
                    return false;
                }
            });
            if (bReturn === false) {
                bFirst = false;
                return false;
            }
        }

        var aQuantity = new Array();
        for ( var x = 0 ; x < eLists.length ; x++) {
            var eList = $(eLists[x]);
            eList.find('.' + $.data(document,'Check_class')).each(function() {
                if ($(this).attr('checked') === true) {
                    iCheckCount++;
                    eList.find('.' + $.data(document,'Quantity_class')).each(function() {
                        var iQuantity = parseInt($(this).val(), 10);
                        aQuantity.push(iQuantity);
                        if (bFirst === true) {
                            if (iQuantity < 1) {
                                alert(__('구매하실 수량을 입력해주세요'));
                                $(this).focus();
                                bReturn = false;
                                return false;
                            }

                            if (($(this).attr('stock') > 0 || $(this).attr('is_soldout') === 'T') && iQuantity > $(this).attr('stock')) {
                                alert(__('선택하신 옵션에 해당하는 상품의 재고 수량이 구매하실 수량보다 적습니다.'));
                                $(this).focus();
                                bReturn = false;
                                return false;
                            }

                            if (iQuantity % iBuyUnit !== 0) {
                                alert(sprintf(__('선택하신 상품은 %s개 단위로 구매 하실 수 있습니다.'), iBuyUnit));
                                $(this).focus();
                                bReturn = false;
                                return false;
                            }

                            if (iQuantity < iProductMin) {
                                alert(sprintf(__('최소 주문수량은 %s개 입니다.'), iProductMin));
                                $(this).focus();
                                bReturn = false;
                                return false;
                            }
                            if (iProductMax > 1 && iQuantity > iProductMax) {
                                alert(sprintf(__('최대 주문수량은 %s개 입니다.'), iProductMax));
                                $(this).focus();
                                bReturn = false;
                                return false;
                            }
                        }

                        if (bReturn === false) {
                            bFirst = false;
                        }
                    });
                    if (bReturn === false) {
                        bFirst = false;
                    }
                }
            });
        }
        if (iCheckCount < 1) {
            alert(__('구매 또는 장바구니에 담을 상품을 선택해주세요.'));
            return false;
        }
        if (bReturn === true) {
            if (typeof (EC_SHOP_FRONT_PRODUCT_DEATAIL_BUNDLE) === 'object') {
                var iProductNum = $.data(document,'iProductNo_class')
                if (EC_SHOP_FRONT_PRODUCT_DEATAIL_BUNDLE.oBundleConfig.hasOwnProperty(iProductNum) === true) {
                    if (EC_SHOP_FRONT_PRODUCT_DEATAIL_BUNDLE.oBundleConfig[iProductNum] !== null) {
                        if (EC_SHOP_FRONT_PRODUCT_DEATAIL_BUNDLE.isValidQuantity(aQuantity, iProductNum) === false) {
                            return false;
                        }
                    }
                }
            }

            this.setBasketPrepare(sType);
        } else {
            return false;
        }
    },
    setBasketPrepare : function(sType)
    {
        var frm = this.getBasketForm();
        this.getHiddenElement('product_no',$.data(document,'iProductNo_class')).appendTo(frm);
        this.getHiddenElement('main_cate_no',$.data(document,'iCategoryNo_class')).appendTo(frm);
        this.getHiddenElement('display_group',$.data(document,'iDisplayGroup_class')).appendTo(frm);
        this.getHiddenElement('basket_type',$.data(document,'sBasketType_class')).appendTo(frm);
        this.getHiddenElement('product_min',$.data(document,'ProductMin_class')).appendTo(frm);
        this.getHiddenElement('delvtype',$('input[name="delvtype"]').val()).appendTo(frm);
        this.getHiddenElement('option_type','T').appendTo(frm);
        this.getHiddenElement('command','add').appendTo(frm);
        this.getHiddenElement('has_option','T').appendTo(frm);
        var eLists = $('.xans-product-optionlist');
        var bAddProduct = false;
        var sOptionParam = '';
        for ( var x = 0 ; x < eLists.length ; x++) {
            var eList = $(eLists[x]);
            eList.find('.' + $.data(document,'Check_class') + ':checked').each(function()
            {
                var sOptionId = $(this).val();
                var iQuantity = eList.find('.' + $.data(document,'Quantity_class')).val();
                if (bAddProduct === false) {
                    var aOption = sOptionId.split('-');
                    var k = 0;
                    for ( var z = 0 ; z < aOption.length ; z++) {
                        key = z + 1;
                        EC_ListAction.getHiddenElement('option' + key,aOption[z]).appendTo(frm);
                    }

                    eList.find('.' + $.data(document,'Quantity_class')).each(function()
                    {
                        EC_ListAction.getHiddenElement('quantity',iQuantity).appendTo(frm);
                        bAddProduct = true;
                    });
                } else {
                    var aBasketInfo = new Array();
                    aBasketInfo.push($.data(document,'iProductNo_class'));
                    aBasketInfo.push($.data(document,'iCategoryNo_class'));
                    aBasketInfo.push($.data(document,'iDisplayGroup_class'));
                    aBasketInfo.push($.data(document,'ProductMin_class'));
                    aBasketInfo.push('product_name');
                    aBasketInfo.push('product_price');
                    aBasketInfo.push('T');
                    aBasketInfo.push(iQuantity);
                    aBasketInfo.push($.data(document,'iOptionSize_class'));
                    var aOption = sOptionId.split('-');
                    var k = 0;
                    for ( var z = 0 ; z < aOption.length ; z++) {
                        if (aOption[z] != '0') {
                            aBasketInfo.push(aOption[z]);
                        }
                    }
                    EC_ListAction.getHiddenElement('basket_info[]',aBasketInfo.join('|')).appendTo(frm);
                }

                if (iQuantity > 0) {
                    frm.append(getInputHidden('selected_item[]',iQuantity+'||'+sOptionId));
                }
            });
        }
        // 선택한상품만 주문하기
        if (sType == 1 || sType == 'naver_checkout') {
            // 이미 장바구니에 들어있는지 체크
            this.selectbuy_action($.data(document,'iProductNo_class'));
            EC_ListAction.getHiddenElement('quantity_override_flag', sIsPrdOverride).appendTo(frm);
        }

        var sAction = '/exec/front/order/basket/';
        action_basket(sType,'category',sAction,frm.serialize(),$.data(document,'sBasketType_class'));
        // 장바구니옵션창 자동으로 닫기게 처리-요거 처리 안하믄 레이어장바구니쪽에서 오류남 ECHOSTING-68196
        $('.xans-product-basketoption').remove();
    },
    getHiddenElement : function(sName, sValue)
    {
        return $('<input />').attr({
            'type' : 'hidden',
            'name' : sName,
            'value' : sValue
        });
    },
    getBasketForm : function()
    {
        return $('<form>').attr({
            'method' : 'POST',
            'name' : 'CategoryBasket'
        });
    },
    /**
     * 리스트에서 상품 비교로 값을 넘긴다.
     */
    setProductCompare : function()
    {
        if ($('.ProductCompareClass:checked').length < 1) {
            alert(__('비교할 상품을 선택해 주세요.'));
            return false;
        } else {
            var aProductNo = new Array();
            $('.ProductCompareClass:checked').each(function()
            {
                var aClass = $(this).attr('class').split(' ');

                var iSize  = aClass.length;
                for ( var x = 0 ; x < iSize ; x++ ) {
                    var iProductNo = parseInt(aClass[x].split('_')[1],10);
                    if (aClass != '' && aClass[x].indexOf('ECPCNO_') == 1 && $.inArray(iProductNo,aProductNo) < 0) {
                        aProductNo.push(iProductNo);
                    }
                }
            });
            if (aProductNo.length > 1) {
                if (aProductNo.length > max_comp_number) {
                    alert(sprintf(__('%s개까지 비교 가능합니다.'), max_comp_number));
                } else {
                    var eForm = $('<form>').attr({
                        'method' : 'get',
                        'action' : sComparePageUrl
                    });
                    var iSize = aProductNo.length;
                    for (var x = 0; x < iSize; x++) {
                        $('<input />').attr({
                            'type' : 'hidden',
                            'name' : 'product_no[]'
                        }).val(aProductNo[x]).appendTo(eForm);
                    }
                    eForm.appendTo($('body')).submit();
                }
            } else {
                alert(__('두개 이상의 상품을 선택하세요.'))
            }
        }
    },
    /**
     * 선택한상품만 주문하기
     *
     * @param string sOptionParam 옵션 파람값
     * @param int iProductNo 상품번호
     */
    selectbuy_action :function(iProductNo)
    {
        // ECHOSTING-95935 장바구니 상품 INSERT 실패 log방지
        if (typeof iProductNo == 'undefined') return ;

        var aOptionId = new Array();
        var aTargetElement = $('.' + $.data(document,'Check_class')+':checked');
        for (var x = 0 ; x < aTargetElement.length ; x++) {
            var sOptionId = $(aTargetElement[x]).val();
            aOptionId.push("item_code[]=" + sOptionId);
        }

        var sUrl = '/exec/front/order/basket/?command=select_prdcnt&product_no=' + iProductNo + '&option_type=T&' + aOptionId.join("&");
        $.ajax({
            url : sUrl,
            dataType : 'json',
            async : false,
            success : function(data) {
                if (data.result > 0 && !confirm(sprintf(__('동일상품이 장바구니에 %s개 있습니다.'), data.result) +'\n'+ __('함께 구매하시겠습니까?'))) {
                    sIsPrdOverride = 'T';
                }
            }
        });
    }
};

/**
 * 접속통계 & 실시간접속통계
 */
$(document).ready(function(){
    // 이미 weblog.js 실행 되었을 경우 종료 
    if ($('#log_realtime').length > 0) {
        return;
    }
    /*
     * QueryString에서 디버그 표시 제거
     */
    function stripDebug(sLocation)
    {
        if (typeof sLocation != 'string') return '';

        sLocation = sLocation.replace(/^d[=]*[\d]*[&]*$/, '');
        sLocation = sLocation.replace(/^d[=]*[\d]*[&]/, '');
        sLocation = sLocation.replace(/(&d&|&d[=]*[\d]*[&]*)/, '&');

        return sLocation;
    }

    // 벤트 몰이 아닐 경우에만 V3(IFrame)을 로드합니다.
    // @date 190117
    // @date 191217 - 이벤트에도 V3 상시 적재로 변경.
    //if (EC_FRONT_JS_CONFIG_MANAGE.sWebLogEventFlag == "F")
    //{
    // T 일 경우 IFRAME 을 노출하지 않는다.
    if (EC_FRONT_JS_CONFIG_MANAGE.sWebLogOffFlag == "F")
    {
        if (window.self == window.top) {
            var rloc = escape(document.location);
            var rref = escape(document.referrer);
        } else {
            var rloc = (document.location).pathname;
            var rref = '';
        }

        // realconn & Ad aggregation
        var _aPrs = new Array();
        _sUserQs = window.location.search.substring(1);
        _sUserQs = stripDebug(_sUserQs);
        _aPrs[0] = 'rloc=' + rloc;
        _aPrs[1] = 'rref=' + rref;
        _aPrs[2] = 'udim=' + window.screen.width + '*' + window.screen.height;
        _aPrs[3] = 'rserv=' + aLogData.log_server2;
        _aPrs[4] = 'cid=' + eclog.getCid();
        _aPrs[5] = 'role_path=' + $('meta[name="path_role"]').attr('content');
        _aPrs[6] = 'stype=' + aLogData.stype;
        _aPrs[7] = 'shop_no=' + aLogData.shop_no;
        _aPrs[8] = 'lang=' + aLogData.lang;
        _aPrs[9] = 'ver=' + aLogData.ver;


        // 모바일웹일 경우 추가 파라미터 생성
        var _sMobilePrs = '';
        if (mobileWeb === true) _sMobilePrs = '&mobile=T&mobile_ver=new';

        _sUrlQs = _sUserQs + '&' + _aPrs.join('&') + _sMobilePrs;

        var _sUrlFull = '/exec/front/eclog/main/?' + _sUrlQs;

        var node = document.createElement('iframe');
        node.setAttribute('src', _sUrlFull);
        node.setAttribute('id', 'log_realtime');
        document.body.appendChild(node);

        $('#log_realtime').hide();
    }

    // eclog2.0, eclog1.9
    var sTime = new Date().getTime();//ECHOSTING-54575

    // 접속통계 서버값이 있다면 weblog.js 호출
    if (aLogData.log_server1 != null && aLogData.log_server1 != '') {
        var sScriptSrc = '//' + aLogData.log_server1 + '/weblog.js?uid=' + aLogData.mid + '&uname=' + aLogData.mid + '&r_ref=' + document.referrer + '&shop_no=' + aLogData.shop_no;
        if (mobileWeb === true) sScriptSrc += '&cafe_ec=mobile';
        sScriptSrc += '&t=' + sTime;//ECHOSTING-54575
        var node = document.createElement('script');
        node.setAttribute('type', 'text/javascript');
        node.setAttribute('src', sScriptSrc);
        node.setAttribute('id', 'log_script');
        document.body.appendChild(node);
    }
});

(function(window){
    window.htmlentities = {
        /**
         * Converts a string to its html characters completely.
         *
         * @param {String} str String with unescaped HTML characters
         **/
        encode : function(str) {
            var buf = [];

            for (var i=str.length-1;i>=0;i--) {
                buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));
            }

            return buf.join('');
        },
        /**
         * Converts an html characterSet into its original character.
         *
         * @param {String} str htmlSet entities
         **/
        decode : function(str) {
            return str.replace(/&#(\d+);/g, function(match, dec) {
                return String.fromCharCode(dec);
            });
        }
    };
})(window);
/**
 * 비동기식 데이터
 */
var CAPP_ASYNC_METHODS = {
    DEBUG: false,
    IS_LOGIN: (document.cookie.match(/(?:^| |;)iscache=F/) ? true : false),
    EC_PATH_ROLE: $('meta[name="path_role"]').attr('content') || '',
    aDatasetList: [],
    $xansMyshopMain: $('.xans-myshop-main'),
    init : function()
    {
    	var bDebug = CAPP_ASYNC_METHODS.DEBUG;

        var aUseModules = [];
        var aNoCachedModules = [];

        $(CAPP_ASYNC_METHODS.aDatasetList).each(function(){
            var sKey = this;

            var oTarget = CAPP_ASYNC_METHODS[sKey];

            if (bDebug) {
                console.log(sKey);
            }
            var bIsUse = oTarget.isUse();
            if (bDebug) {
                console.log('   isUse() : ' + bIsUse);
            }

            if (bIsUse === true) {
                aUseModules.push(sKey);

                if (oTarget.restoreCache === undefined || oTarget.restoreCache() === false) {
                    if (bDebug) {
                        console.log('   restoreCache() : true');
                    }
                    aNoCachedModules.push(sKey);
                }
            }
        });

        if (aNoCachedModules.length > 0) {
            var sEditor = '';
            try {
                if (bEditor === true) {
                    // 에디터에서 접근했을 경우 임의의 상품 지정
                    sEditor = '&PREVIEW_SDE=1';
                }
            } catch(e) { }

            var sPathRole = '&path_role=' + CAPP_ASYNC_METHODS.EC_PATH_ROLE;

            $.ajax(
            {
                url : '/exec/front/manage/async?module=' + aNoCachedModules.join(',') + sEditor + sPathRole,
                dataType : 'json',
                success : function(aData)
                {
                	CAPP_ASYNC_METHODS.setData(aData, aUseModules);
                }
            });

        } else {
        	CAPP_ASYNC_METHODS.setData({}, aUseModules);

        }
    },
    setData : function(aData, aUseModules)
    {
        aData = aData || {};

        $(aUseModules).each(function(){
            var sKey = this;

            var oTarget = CAPP_ASYNC_METHODS[sKey];

            if (oTarget.setData !== undefined && aData.hasOwnProperty(sKey) === true) {
                oTarget.setData(aData[sKey]);
            }

            if (oTarget.execute !== undefined) {
                oTarget.execute();
            }
        });
    },

    _getCookie: function(sCookieName)
    {
        var re = new RegExp('(?:^| |;)' + sCookieName + '=([^;]+)');
        var aCookieValue = document.cookie.match(re);
        return aCookieValue ? aCookieValue[1] : null;
    }
};
/**
 * 비동기식 데이터 - 회원 정보
 */
CAPP_ASYNC_METHODS.aDatasetList.push('member');
CAPP_ASYNC_METHODS.member = {
    __sEncryptedString: null,
    __isAdult: 'F',

    // 회원 데이터
    __sMemberId: null,
    __sName: null,
    __sNickName: null,
    __sGroupName: null,
    __sEmail: null,
    __sPhone: null,
    __sCellphone: null,
    __sBirthday: null,
    __sGroupNo: null,
    __sBoardWriteName: null,
    __sAdditionalInformation: null,
    __sCreatedDate: null,

    isUse: function()
    {
        if (CAPP_ASYNC_METHODS.IS_LOGIN === true) {
            if ($('.xans-layout-statelogon, .xans-layout-logon').length > 0) {
                return true;
            }

            if (CAPP_ASYNC_METHODS.recent.isUse() === true
                && typeof(EC_FRONT_JS_CONFIG_SHOP) !== 'undefined'
                && EC_FRONT_JS_CONFIG_SHOP.adult19Warning === 'T') {
                return true;
            }

            if ( typeof EC_APPSCRIPT_SDK_DATA != "undefined" && jQuery.inArray('customer', EC_APPSCRIPT_SDK_DATA ) > -1 ) {
                return true;
            }

        } else {
            // 비 로그인 상태에서 삭제처리
            this.removeCache();
        }

        return false;
    },

    restoreCache: function()
    {
        // sessionStorage 지원 여부 확인
        if (!window.sessionStorage) {
            return false;
        }

        // 데이터 복구 유무
        var bRestored = false;

        try {
            // 데이터 복구
            var oCache = JSON.parse(window.sessionStorage.getItem('member_' + EC_SDE_SHOP_NUM));

            // expire 체크
            if (oCache.exp < Date.now()) {
                throw 'cache has expired.';
            }

            // 데이터 체크
            if (typeof oCache.data.member_id === 'undefined'
                || oCache.data.member_id === ''
                || typeof oCache.data.name === 'undefined'
                || typeof oCache.data.nick_name === 'undefined'
                || typeof oCache.data.group_name === 'undefined'
                || typeof oCache.data.group_no === 'undefined'
                || typeof oCache.data.email === 'undefined'
                || typeof oCache.data.phone === 'undefined'
                || typeof oCache.data.cellphone === 'undefined'
                || typeof oCache.data.birthday === 'undefined'
                || typeof oCache.data.board_write_name === 'undefined'
                || typeof oCache.data.additional_information === 'undefined'
                || typeof oCache.data.created_date === 'undefined'
            ) {
                throw 'Invalid cache data.'
            }

            // 데이터 복구
            this.__sMemberId = oCache.data.member_id;
            this.__sName = oCache.data.name;
            this.__sNickName = oCache.data.nick_name;
            this.__sGroupName = oCache.data.group_name;
            this.__sGroupNo   = oCache.data.group_no;
            this.__sEmail = oCache.data.email;
            this.__sPhone = oCache.data.phone;
            this.__sCellphone = oCache.data.cellphone;
            this.__sBirthday = oCache.data.birthday;
            this.__sBoardWriteName = oCache.data.board_write_name;
            this.__sAdditionalInformation = oCache.data.additional_information;
            this.__sCreatedDate = oCache.data.created_date;

            bRestored = true;
        } catch(e) {
            // 복구 실패시 캐시 삭제
            this.removeCache();
        }

        return bRestored;
    },

    cache: function()
    {
        // sessionStorage 지원 여부 확인
        if (!window.sessionStorage) {
            return;
        }

        // 캐시
        window.sessionStorage.setItem('member_' + EC_SDE_SHOP_NUM, JSON.stringify({
            exp: Date.now() + (1000 * 60 * 10),
            data: this.getData()
        }));
    },

    removeCache: function()
    {
        // sessionStorage 지원 여부 확인
        if (!window.sessionStorage) {
            return;
        }

        // 캐시 삭제
        window.sessionStorage.removeItem('member_' + EC_SDE_SHOP_NUM);
    },

    setData: function(oData)
    {
        this.__sEncryptedString = oData.memberData;
        this.__isAdult = oData.memberIsAdult;
    },

    execute: function()
    {
        if (this.__sMemberId === null) {
            AuthSSLManager.weave({
                'auth_mode'          : 'decryptClient',
                'auth_string'        : this.__sEncryptedString,
                'auth_callbackName'  : 'CAPP_ASYNC_METHODS.member.setDataCallback'
            });
        } else {
            this.render()
        }
    },

    setDataCallback: function(sData)
    {
        try {
            var sDecodedData = decodeURIComponent(sData);

            if (AuthSSLManager.isError(sDecodedData) == true) {
                console.log(sDecodedData);
                return;
            }

            var oData = AuthSSLManager.unserialize(sDecodedData);
            this.__sMemberId = oData.id || '';
            this.__sName = oData.name || '';
            this.__sNickName = oData.nick || '';
            this.__sGroupName = oData.group_name || '';
            this.__sGroupNo   = oData.group_no || '';
            this.__sEmail = oData.email || '';
            this.__sPhone = oData.phone || '';
            this.__sCellphone = oData.cellphone || '';
            this.__sBirthday = oData.birthday || 'F';
            this.__sBoardWriteName = oData.board_write_name || '';
            this.__sAdditionalInformation = oData.additional_information || '';
            this.__sCreatedDate = oData.created_date || '';

            // 데이터 랜더링
            this.render();

            // 데이터 캐시
            this.cache();
        } catch(e) {}
    },

    render: function()
    {
        // 친구초대
        if ($('.xans-myshop-asyncbenefit').length > 0) {
            $('#reco_url').attr({value: $('#reco_url').val() + this.__sMemberId});
        }

        $('.xans-member-var-id').html(this.__sMemberId);
        $('.xans-member-var-name').html(this.__sName);
        $('.xans-member-var-nick').html(this.__sNickName);
        $('.xans-member-var-group_name').html(this.__sGroupName);
        $('.xans-member-var-group_no').html(this.__sGroupNo);
        $('.xans-member-var-email').html(this.__sEmail);
        $('.xans-member-var-phone').html(this.__sPhone);

        if ($('.xans-board-commentwrite').length > 0 && typeof BOARD_COMMENT !== 'undefined') {
            BOARD_COMMENT.setCmtData();
        }
    },

    getMemberIsAdult: function()
    {
        return this.__isAdult;
    },

    getData: function()
    {
        return {
            member_id: this.__sMemberId,
            name: this.__sName,
            nick_name: this.__sNickName,
            group_name: this.__sGroupName,
            group_no: this.__sGroupNo,
            email: this.__sEmail,
            phone: this.__sPhone,
            cellphone: this.__sCellphone,
            birthday: this.__sBirthday,
            board_write_name: this.__sBoardWriteName,
            additional_information: this.__sAdditionalInformation,
            created_date: this.__sCreatedDate
        };
    }
};
/**
 * 비동기식 데이터 - 예치금
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Ordercnt');
CAPP_ASYNC_METHODS.Ordercnt = {
    __iOrderShppiedBeforeCount: null,
    __iOrderShppiedStandbyCount: null,
    __iOrderShppiedBeginCount: null,
    __iOrderShppiedComplateCount: null,
    __iOrderShppiedCancelCount: null,
    __iOrderShppiedExchangeCount: null,
    __iOrderShppiedReturnCount: null,

    __$target: $('#xans_myshop_orderstate_shppied_before_count'),
    __$target2: $('#xans_myshop_orderstate_shppied_standby_count'),
    __$target3: $('#xans_myshop_orderstate_shppied_begin_count'),
    __$target4: $('#xans_myshop_orderstate_shppied_complate_count'),
    __$target5: $('#xans_myshop_orderstate_order_cancel_count'),
    __$target6: $('#xans_myshop_orderstate_order_exchange_count'),
    __$target7: $('#xans_myshop_orderstate_order_return_count'),

    isUse: function()
    {
        if ($('.xans-myshop-orderstate').length > 0) {
            return true; 
        }

        return false;
    },

    restoreCache: function()
    {
        var sCookieName = 'ordercnt_' + EC_SDE_SHOP_NUM;
        var re = new RegExp('(?:^| |;)' + sCookieName + '=([^;]+)');
        var aCookieValue = document.cookie.match(re);
        if (aCookieValue) {
            var aData = jQuery.parseJSON(decodeURIComponent(aCookieValue[1]));
            this.__iOrderShppiedBeforeCount = aData.shipped_before_count;
            this.__iOrderShppiedStandbyCount = aData.shipped_standby_count;
            this.__iOrderShppiedBeginCount = aData.shipped_begin_count;
            this.__iOrderShppiedComplateCount = aData.shipped_complate_count;
            this.__iOrderShppiedCancelCount = aData.order_cancel_count;
            this.__iOrderShppiedExchangeCount = aData.order_exchange_count;
            this.__iOrderShppiedReturnCount = aData.order_return_count;
            return true;
        }

        return false;
    },

    setData: function(aData)
    {
        this.__iOrderShppiedBeforeCount = aData['shipped_before_count'];
        this.__iOrderShppiedStandbyCount = aData['shipped_standby_count'];
        this.__iOrderShppiedBeginCount = aData['shipped_begin_count'];
        this.__iOrderShppiedComplateCount = aData['shipped_complate_count'];
        this.__iOrderShppiedCancelCount = aData['order_cancel_count'];
        this.__iOrderShppiedExchangeCount = aData['order_exchange_count'];
        this.__iOrderShppiedReturnCount = aData['order_return_count'];
    },

    execute: function()
    {
        this.__$target.html(this.__iOrderShppiedBeforeCount);
        this.__$target2.html(this.__iOrderShppiedStandbyCount);
        this.__$target3.html(this.__iOrderShppiedBeginCount);
        this.__$target4.html(this.__iOrderShppiedComplateCount);
        this.__$target5.html(this.__iOrderShppiedCancelCount);
        this.__$target6.html(this.__iOrderShppiedExchangeCount);
        this.__$target7.html(this.__iOrderShppiedReturnCount);
    },

    getData: function()
    {
        return {
            shipped_before_count: this.__iOrderShppiedBeforeCount,
            shipped_standby_count: this.__iOrderShppiedStandbyCount,
            shipped_begin_count: this.__iOrderShppiedBeginCount,
            shipped_complate_count: this.__iOrderShppiedComplateCount,
            order_cancel_count: this.__iOrderShppiedCancelCount,
            order_exchange_count: this.__iOrderShppiedExchangeCount,
            order_return_count: this.__iOrderShppiedReturnCount
        };
    }
};
/**
 * 비동기식 데이터 - 장바구니 갯수
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Basketcnt');
CAPP_ASYNC_METHODS.Basketcnt = {
    __iBasketCount: null,

    __$target: $('.xans-layout-orderbasketcount span a'),
    __$target2: $('#xans_myshop_basket_cnt'),
    __$target3: CAPP_ASYNC_METHODS.$xansMyshopMain.find('.xans_myshop_main_basket_cnt'),
    __$target4: $('.EC-Layout-Basket-count'),

    isUse: function()
    {
        if (this.__$target.length > 0) {
            return true;
        }
        if (this.__$target2.length > 0) {
            return true;
        }
        if (this.__$target3.length > 0) {
            return true;
        }
        if (this.__$target4.length > 0) {
            return true;
        }

        if ( typeof EC_APPSCRIPT_SDK_DATA != "undefined" && jQuery.inArray('personal', EC_APPSCRIPT_SDK_DATA ) > -1 ) {
            return true;
        }

        return false;
    },

    restoreCache: function()
    {
        var sCookieName = 'basketcount_' + EC_SDE_SHOP_NUM;
        var re = new RegExp('(?:^| |;)' + sCookieName + '=([^;]+)');
        var aCookieValue = document.cookie.match(re);
        if (aCookieValue) {
            this.__iBasketCount = parseInt(aCookieValue[1], 10);
            return true;
        }
        
        return false;
    },

    setData: function(sData)
    {
        this.__iBasketCount = Number(sData);
    },

    execute: function()
    {
        this.__$target.html(this.__iBasketCount);

        if (SHOP.getLanguage() === 'ko_KR') {
            this.__$target2.html(this.__iBasketCount + '개');
        } else {
            this.__$target2.html(this.__iBasketCount);
        }

        this.__$target3.html(this.__iBasketCount);
        
        this.__$target4.html(this.__iBasketCount);
        
        if (this.__iBasketCount > 0 && this.__$target4.length > 0) {
            var $oCountDisplay = $('.EC-Layout_Basket-count-display');

            if ($oCountDisplay.length > 0) {
                $oCountDisplay.removeClass('displaynone');
            }
        }
    },

    getData: function()
    {
        return {
            count: this.__iBasketCount
        };
    }
};
/**
 * 비동기식 데이터 - 장바구니 금액
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Basketprice');
CAPP_ASYNC_METHODS.Basketprice = {
    __sBasketPrice: null,

    __$target: $('#xans_myshop_basket_price'),

    isUse: function()
    {
        if (this.__$target.length > 0) {
            return true;
        }

        if ( typeof EC_APPSCRIPT_SDK_DATA != "undefined" && jQuery.inArray('personal', EC_APPSCRIPT_SDK_DATA ) > -1 ) {
            return true;
        }

        return false;
    },

    restoreCache: function()
    {
        var sCookieName = 'basketprice_' + EC_SDE_SHOP_NUM;
        var re = new RegExp('(?:^| |;)' + sCookieName + '=([^;]+)');
        var aCookieValue = document.cookie.match(re);
        if (aCookieValue) {
            this.__sBasketPrice = decodeURIComponent((aCookieValue[1]+ '').replace(/\+/g, '%20'));
            return true;
        }
        
        return false;
    },

    setData: function(sData)
    {
        this.__sBasketPrice = sData;
    },

    execute: function()
    {
        this.__$target.html(this.__sBasketPrice);
    },

    getData: function()
    {
        // 데이터 없는경우 0
        var sBasketPrice = (this.__sBasketPrice || 0) + '';

        return {
            basket_price: parseFloat(SHOP_PRICE_FORMAT.detachFormat(htmlentities.decode(sBasketPrice))).toFixed(2)
        };
    }
};
/*
 * 비동기식 데이터 - 장바구니 상품리스트
 */
CAPP_ASYNC_METHODS.aDatasetList.push('BasketProduct');
CAPP_ASYNC_METHODS.BasketProduct = {

    STORAGE_KEY: 'BasketProduct_' +  EC_SDE_SHOP_NUM,

    __aData: null,

    __$target: $('.xans-layout-orderbasketcount span a'),
    __$target2: $('#xans_myshop_basket_cnt'),
    __$target3: CAPP_ASYNC_METHODS.$xansMyshopMain.find('.xans_myshop_main_basket_cnt'),
    __$target4: $('.EC-Layout-Basket-count'),

    isUse: function()
    {
        if (this.__$target.length > 0) {
            return true;
        }
        if (this.__$target2.length > 0) {
            return true;
        }
        if (this.__$target3.length > 0) {
            return true;
        }
        if (this.__$target4.length > 0) {
            return true;
        }

        if ( typeof EC_APPSCRIPT_SDK_DATA != "undefined" && jQuery.inArray('personal', EC_APPSCRIPT_SDK_DATA ) > -1 ) {
            return true;
        }
    },

    restoreCache: function()
    {
        // sessionStorage 지원 여부 확인
        if (!window.sessionStorage) {
            return false;
        }

        var sSessionStorageData = window.sessionStorage.getItem(this.STORAGE_KEY);
        if (sSessionStorageData === null) {
            return false;
        }

        try {
            this.__aData = [];
            var aStorageData = JSON.parse(sSessionStorageData);

            for (var iKey in aStorageData) {
                this.__aData.push(aStorageData[iKey]);
            }

            return true;
        } catch(e) {

            // 복구 실패시 캐시 삭제
            this.removeCache();

            return false;
        }
    },

    removeCache: function()
    {
        // sessionStorage 지원 여부 확인
        if (!window.sessionStorage) {
            return;
        }
        // 캐시 삭제
        window.sessionStorage.removeItem(this.STORAGE_KEY);
    },

    setData: function(oData)
    {
        this.__aData = oData;

        // sessionStorage 지원 여부 확인
        if (!window.sessionStorage) {
            return;
        }

        try {
            sessionStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.getData()));
        } catch (error) {
        }
    },

    execute: function()
    {

    },

    getData: function()
    {
        var aStorageData = this.__aData;

        if (aStorageData != null) {
            var oNewStorageData = [];

            for (var iKey in aStorageData) {
                oNewStorageData.push(aStorageData[iKey]);
            }

            return oNewStorageData;
        } else {
            return false;
        }
    }
};
/**
 * 비동기식 데이터 - 쿠폰 갯수
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Couponcnt');
CAPP_ASYNC_METHODS.Couponcnt = {
    __iCouponCount: null,

    __$target: $('.xans-layout-myshopcouponcount'),
    __$target2: $('#xans_myshop_coupon_cnt'),
    __$target3: CAPP_ASYNC_METHODS.$xansMyshopMain.find('.xans_myshop_main_coupon_cnt'),
    __$target4: $('#xans_myshop_bankbook_coupon_cnt'),

    isUse: function()
    {
        if (CAPP_ASYNC_METHODS.IS_LOGIN === true) {
            if (this.__$target.length > 0) {
                return true;
            }

            if (this.__$target2.length > 0) {
                return true;
            }

            if (this.__$target3.length > 0) {
                return true;
            }

            if (this.__$target4.length > 0) {
                return true;
            }

            if ( typeof EC_APPSCRIPT_SDK_DATA != "undefined" && jQuery.inArray('promotion', EC_APPSCRIPT_SDK_DATA ) > -1 ) {
                return true;
            }
        }

        return false;
    },
    
    restoreCache: function()
    {
        var sCookieName = 'couponcount_' + EC_SDE_SHOP_NUM;
        var re = new RegExp('(?:^| |;)' + sCookieName + '=([^;]+)');
        var aCookieValue = document.cookie.match(re);
        if (aCookieValue) {
            this.__iCouponCount = parseInt(aCookieValue[1], 10);
            return true;
        }
        
        return false;
    },
    setData: function(sData)
    {
        this.__iCouponCount = Number(sData);
    },

    execute: function()
    {
        this.__$target.html(this.__iCouponCount);

        if (SHOP.getLanguage() === 'ko_KR') {
            this.__$target2.html(this.__iCouponCount + '개');
        } else {
            this.__$target2.html(this.__iCouponCount);
        }

        this.__$target3.html(this.__iCouponCount);
        this.__$target4.html(this.__iCouponCount);
    },

    getData: function()
    {
        return {
            count: this.__iCouponCount
        };
    }
};
/**
 * 비동기식 데이터 - 적립금
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Mileage');
CAPP_ASYNC_METHODS.Mileage = {
    __sAvailMileage: null,
    __sUsedMileage: null,
    __sTotalMileage: null,
    __sUnavailMileage: null,
    __sReturnedMileage: null,

    __$target: $('#xans_myshop_mileage'),
    __$target2: $('#xans_myshop_bankbook_avail_mileage, #xans_myshop_summary_avail_mileage'),
    __$target3: $('#xans_myshop_bankbook_used_mileage, #xans_myshop_summary_used_mileage'),
    __$target4: $('#xans_myshop_bankbook_total_mileage, #xans_myshop_summary_total_mileage'),
    __$target5: $('#xans_myshop_summary_unavail_mileage'),
    __$target6: $('#xans_myshop_summary_returned_mileage'),
    __$target7: $('#xans_myshop_avail_mileage'),

    isUse: function()
    {
        if (CAPP_ASYNC_METHODS.IS_LOGIN === true) {
            if (this.__$target.length > 0) {
                return true;
            }

            if (this.__$target2.length > 0) {
                return true;
            }

            if (this.__$target3.length > 0) {
                return true;
            }

            if (this.__$target4.length > 0) {
                return true;
            }

            if (this.__$target5.length > 0) {
                return true;
            }

            if (this.__$target6.length > 0) {
                return true;
            }

            if (this.__$target7.length > 0) {
                return true;
            }

            if ( typeof EC_APPSCRIPT_SDK_DATA != "undefined" && jQuery.inArray('customer', EC_APPSCRIPT_SDK_DATA ) > -1 ) {
                return true;
            }
        }

        return false;
    },

    restoreCache: function()
    {
        // 특정 경로 룰의 경우 복구 취소
        if (PathRoleValidator.isInvalidPathRole()) {
            return false;
        }

        // 쿠키로부터 데이터 획득
        var sAvailMileage = CAPP_ASYNC_METHODS._getCookie('ec_async_cache_avail_mileage_' + EC_SDE_SHOP_NUM);
        var sReturnedMileage = CAPP_ASYNC_METHODS._getCookie('ec_async_cache_returned_mileage_' + EC_SDE_SHOP_NUM);
        var sUnavailMileage = CAPP_ASYNC_METHODS._getCookie('ec_async_cache_unavail_mileage_' + EC_SDE_SHOP_NUM);
        var sUsedMileage = CAPP_ASYNC_METHODS._getCookie('ec_async_cache_used_mileage_' + EC_SDE_SHOP_NUM);

        // 데이터가 하나라도 없는경우 복구 실패
        if (sAvailMileage === null
            || sReturnedMileage === null
            || sUnavailMileage === null
            || sUsedMileage === null
        ) {
            return false;
        }

        // 전체 마일리지 계산
        var sTotalMileage = (parseFloat(sAvailMileage) +
            parseFloat(sUnavailMileage) +
            parseFloat(sUsedMileage)).toString();

        // 단위정보를 계산하여 필드에 셋
        this.__sAvailMileage = parseFloat(sAvailMileage).toFixed(2);
        this.__sReturnedMileage = parseFloat(sReturnedMileage).toFixed(2);
        this.__sUnavailMileage = parseFloat(sUnavailMileage).toFixed(2);
        this.__sUsedMileage = parseFloat(sUsedMileage).toFixed(2);
        this.__sTotalMileage = parseFloat(sTotalMileage).toFixed(2);

        return true;
    },

    setData: function(aData)
    {
        this.__sAvailMileage = parseFloat(aData['avail_mileage'] || 0).toFixed(2);
        this.__sUsedMileage = parseFloat(aData['used_mileage'] || 0).toFixed(2);
        this.__sTotalMileage = parseFloat(aData['total_mileage'] || 0).toFixed(2);
        this.__sUnavailMileage = parseFloat(aData['unavail_mileage'] || 0).toFixed(2);
        this.__sReturnedMileage = parseFloat(aData['returned_mileage'] || 0).toFixed(2);
    },

    execute: function()
    {
        this.__$target.html(SHOP_PRICE_FORMAT.toShopMileagePrice(this.__sAvailMileage));
        this.__$target2.html(SHOP_PRICE_FORMAT.toShopMileagePrice(this.__sAvailMileage));
        this.__$target3.html(SHOP_PRICE_FORMAT.toShopMileagePrice(this.__sUsedMileage));
        this.__$target4.html(SHOP_PRICE_FORMAT.toShopMileagePrice(this.__sTotalMileage));
        this.__$target5.html(SHOP_PRICE_FORMAT.toShopMileagePrice(this.__sUnavailMileage));
        this.__$target6.html(SHOP_PRICE_FORMAT.toShopMileagePrice(this.__sReturnedMileage));
        this.__$target7.html(SHOP_PRICE_FORMAT.toShopMileagePrice(this.__sAvailMileage));
    },

    getData: function()
    {
        return {
            available_mileage: this.__sAvailMileage,
            used_mileage: this.__sUsedMileage,
            total_mileage: this.__sTotalMileage,
            returned_mileage: this.__sReturnedMileage,
            unavailable_mileage: this.__sUnavailMileage
        };
    }
};
/**
 * 비동기식 데이터 - 예치금
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Deposit');
CAPP_ASYNC_METHODS.Deposit = {
    __sTotalDeposit: null,
    __sAllDeposit: null,
    __sUsedDeposit: null,
    __sRefundWaitDeposit: null,
    __sMemberTotalDeposit: null,

    __$target: $('#xans_myshop_deposit'),
    __$target2: $('#xans_myshop_bankbook_deposit'),
    __$target3: $('#xans_myshop_summary_deposit'),
    __$target4: $('#xans_myshop_summary_all_deposit'),
    __$target5: $('#xans_myshop_summary_used_deposit'),
    __$target6: $('#xans_myshop_summary_refund_wait_deposit'),
    __$target7: $('#xans_myshop_total_deposit'),

    isUse: function()
    {
        if (CAPP_ASYNC_METHODS.IS_LOGIN === true) {
            if (this.__$target.length > 0) {
                return true;
            }

            if (this.__$target2.length > 0) {
                return true;
            }

            if (this.__$target3.length > 0) {
                return true;
            }

            if (this.__$target4.length > 0) {
                return true;
            }

            if (this.__$target5.length > 0) {
                return true;
            }

            if (this.__$target6.length > 0) {
                return true;
            }

            if (this.__$target7.length > 0) {
                return true;
            }

            if ( typeof EC_APPSCRIPT_SDK_DATA != "undefined" && jQuery.inArray('customer', EC_APPSCRIPT_SDK_DATA ) > -1 ) {
                return true;
            }
        }

        return false;
    },

    restoreCache: function()
    {
        // 특정 경로 룰의 경우 복구 취소
        if (PathRoleValidator.isInvalidPathRole()) {
            return false;
        }

        // 쿠키로부터 데이터 획득
        var sAllDeposit = CAPP_ASYNC_METHODS._getCookie('ec_async_cache_all_deposit_' + EC_SDE_SHOP_NUM);
        var sUsedDeposit = CAPP_ASYNC_METHODS._getCookie('ec_async_cache_used_deposit_' + EC_SDE_SHOP_NUM);
        var sRefundWaitDeposit = CAPP_ASYNC_METHODS._getCookie('ec_async_cache_deposit_refund_wait_' + EC_SDE_SHOP_NUM);
        var sMemberTotalDeposit = CAPP_ASYNC_METHODS._getCookie('ec_async_cache_member_total_deposit_' + EC_SDE_SHOP_NUM);

        // 데이터가 하나라도 없는경우 복구 실패
        if (sAllDeposit === null
            || sUsedDeposit === null
            || sRefundWaitDeposit === null
            || sMemberTotalDeposit === null
        ) {
            return false;
        }

        // 사용 가능한 예치금 계산
        var sTotalDeposit = (parseFloat(sAllDeposit) -
            parseFloat(sUsedDeposit) -
            parseFloat(sRefundWaitDeposit)).toString();

        // 단위정보를 계산하여 필드에 셋
        this.__sTotalDeposit = parseFloat(sTotalDeposit).toFixed(2);
        this.__sAllDeposit = parseFloat(sAllDeposit).toFixed(2);
        this.__sUsedDeposit = parseFloat(sUsedDeposit).toFixed(2);
        this.__sRefundWaitDeposit = parseFloat(sRefundWaitDeposit).toFixed(2);
        this.__sMemberTotalDeposit = parseFloat(sMemberTotalDeposit).toFixed(2);

        return true;
    },

    setData: function(aData)
    {
        this.__sTotalDeposit = parseFloat(aData['total_deposit'] || 0).toFixed(2);
        this.__sAllDeposit = parseFloat(aData['all_deposit'] || 0).toFixed(2);
        this.__sUsedDeposit = parseFloat(aData['used_deposit'] || 0).toFixed(2);
        this.__sRefundWaitDeposit = parseFloat(aData['deposit_refund_wait'] || 0).toFixed(2);
        this.__sMemberTotalDeposit = parseFloat(aData['member_total_deposit'] || 0).toFixed(2);
    },

    execute: function()
    {
        this.__$target.html(SHOP_PRICE_FORMAT.toShopDepositPrice(this.__sTotalDeposit));
        this.__$target2.html(SHOP_PRICE_FORMAT.toShopDepositPrice(this.__sTotalDeposit));
        this.__$target3.html(SHOP_PRICE_FORMAT.toShopDepositPrice(this.__sTotalDeposit));
        this.__$target4.html(SHOP_PRICE_FORMAT.toShopDepositPrice(this.__sAllDeposit));
        this.__$target5.html(SHOP_PRICE_FORMAT.toShopDepositPrice(this.__sUsedDeposit));
        this.__$target6.html(SHOP_PRICE_FORMAT.toShopDepositPrice(this.__sRefundWaitDeposit));
        this.__$target7.html(SHOP_PRICE_FORMAT.toShopDepositPrice(this.__sMemberTotalDeposit));
    },

    getData: function()
    {
        return {
            total_deposit: this.__sTotalDeposit,
            used_deposit: this.__sUsedDeposit,
            refund_wait_deposit: this.__sRefundWaitDeposit,
            all_deposit: this.__sAllDeposit,
            member_total_deposit: this.__sMemberTotalDeposit
        };
    }
};
/**
 * 비동기식 데이터 - 위시리스트
 */
CAPP_ASYNC_METHODS.aDatasetList.push('WishList');
CAPP_ASYNC_METHODS.WishList = {
    STORAGE_KEY: 'localWishList' +  EC_SDE_SHOP_NUM,
    __$targetWishIcon: $('.icon_img.ec-product-listwishicon'),
    __$targetWishList: $('.xans-myshop-wishlist'),
    __aWishList: null,
    __aTags_on: null,
    __aTags_off: null,

    isUse: function()
    {
        if (this.__$targetWishIcon.length > 0 || this.__$targetWishList.length > 0
        || CAPP_ASYNC_METHODS.EC_PATH_ROLE === 'PRODUCT_DETAIL') {
            return true;
        }
        return false;
    },

    restoreCache: function()
    {
        if (!window.sessionStorage) {
            return false;
        }

        var sSessionStorageData = window.sessionStorage.getItem(this.STORAGE_KEY);
        if (sSessionStorageData === null) {
            return false;
        }

        var aStorageData = $.parseJSON(sSessionStorageData);
        if (this.__$targetWishList.length > 0 || aStorageData['isLogin'] !== CAPP_ASYNC_METHODS.IS_LOGIN) {
            this.clearStorage();
            return false;
        }

        if (CAPP_ASYNC_METHODS.EC_PATH_ROLE === 'MAIN') {
            var aWishList = aStorageData['wishList'];
            this.__aTags_on = aStorageData['on_tags'];
            this.__aTags_off = aStorageData['off_tags'];
            this.__aWishList = [];
            for (var i = 0; i < aWishList.length; i++) {
                var aTempWishList = [];
                aTempWishList.product_no = aWishList[i];
                this.__aWishList.push(aTempWishList);
            }
            return true;
        }
        return false;
    },

    setData: function(aData)
    {
        if (aData.hasOwnProperty('wishList') === false || aData.hasOwnProperty('on_tags') === false) {
            return;
        }

        this.__aWishList = aData.wishList;
        this.__aTags_on = aData.on_tags;
        this.__aTags_off = aData.off_tags;

        if (window.sessionStorage) {
            var aWishList = [];

            for (var i = 0 ; i < aData.wishList.length ; i++) {
                aWishList.push(aData.wishList[i].product_no);
            }

            var oNewStorageData = {
                'wishList' : aWishList,
                'on_tags' : aData.on_tags,
                'off_tags' : aData.off_tags,
                'isLogin' : CAPP_ASYNC_METHODS.IS_LOGIN
            };

            if (typeof oNewStorageData !== 'undefined') {
                sessionStorage.setItem(this.STORAGE_KEY , JSON.stringify(oNewStorageData));
            }
        }
    },

    execute: function()
    {
        var aWishList = this.__aWishList;
        var aTagsOn = this.__aTags_on;
        var aTagsOff = this.__aTags_off;

        if (aWishList === null || typeof aWishList === 'undefined') {
            aWishList = [];
        }

        var oTarget = $('.ec-product-listwishicon');
        for (var sKey in aTagsOff) {
            oTarget.attr(sKey, aTagsOff[sKey]);
        }

        for (var i = 0 ; i < aWishList.length ; i++) {
            assignAttribute(aWishList[i]);
        }

        /**
         * oTarget 엘레먼트에 aData의 정보를 어싸인함.
         * @param array aData 위시리스트 정보
         */
        function assignAttribute(aData)
        {
            var iProductNo = aData['product_no'];
            var oTarget = $('.ec-product-listwishicon[productno="'+iProductNo+'"]');

            // oTarget의 src, alt, icon_status attribute의 값을 할당
            for (var sKey in aTagsOn) {
                oTarget.attr(sKey, aTagsOn[sKey]);
            }
        }

    },

    /**
     * 세션스토리지 삭제
     */
    clearStorage: function()
    {
        if (!window.sessionStorage) {
            return;
        }
        window.sessionStorage.removeItem(this.STORAGE_KEY);
    },

    /**
     * sCommand에 따른 sessionStorage Set
     * @param iProductNo
     * @param sCommand 추가(add)/삭제(del) sCommand
     */
    setSessionStorageItem: function(iProductNo, sCommand)
    {
        if (this.isUse() === false) {
            return;
        }

        var oStorageData = $.parseJSON(sessionStorage.getItem(this.STORAGE_KEY));
        var aWishList = oStorageData['wishList'];
        var iLimit = 200;

        if (aWishList === null) {
            aWishList = [];
        }

        var iProductNo = parseInt(iProductNo, 10);
        var iIndex = aWishList.indexOf(iProductNo);

        if (sCommand === 'add') {
            if (aWishList.length >= iLimit) {
                aWishList.splice(aWishList.length - 1, 1);
            }
            if (iIndex < 0) {
                aWishList.unshift(iProductNo);
            }
        } else {
            if (iIndex > -1) {
                aWishList.splice(iIndex, 1);
            }
        }

        oStorageData['wishList'] = aWishList;
        sessionStorage.setItem(this.STORAGE_KEY, JSON.stringify(oStorageData));
    }
};

/**
 * 비동기식 데이터 - 관심상품 갯수
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Wishcount');
CAPP_ASYNC_METHODS.Wishcount = {
    __iWishCount: null,

    __$target: $('#xans_myshop_interest_prd_cnt'),
    __$target2: CAPP_ASYNC_METHODS.$xansMyshopMain.find('.xans_myshop_main_interest_prd_cnt'),

    isUse: function()
    {
        if (this.__$target.length > 0) {
            return true;
        }
        if (this.__$target2.length > 0) {
            return true;
        }

        if ( typeof EC_APPSCRIPT_SDK_DATA != "undefined" && jQuery.inArray('personal', EC_APPSCRIPT_SDK_DATA ) > -1 ) {
            return true;
        }

        return false;
    },

    restoreCache: function()
    {
        var sCookieName = 'wishcount_' + EC_SDE_SHOP_NUM;
        var re = new RegExp('(?:^| |;)' + sCookieName + '=([^;]+)');
        var aCookieValue = document.cookie.match(re);
        if (aCookieValue) {
            this.__iWishCount = parseInt(aCookieValue[1], 10);
            return true;
        }

        return false;
    },

    setData: function(sData)
    {
        this.__iWishCount = Number(sData);
    },

    execute: function()
    {
        if (SHOP.getLanguage() === 'ko_KR') {
            this.__$target.html(this.__iWishCount + '개');
        } else {
            this.__$target.html(this.__iWishCount);
        }

        this.__$target2.html(this.__iWishCount);
    },

    getData: function()
    {
        return {
            count: this.__iWishCount
        };
    }
};
/**
 * 비동기식 데이터 - 최근 본 상품
 */
CAPP_ASYNC_METHODS.aDatasetList.push('recent');
CAPP_ASYNC_METHODS.recent = {
    STORAGE_KEY: 'localRecentProduct' +  EC_SDE_SHOP_NUM,

    __$target: $('.xans-layout-productrecent'),

    __aData: null,

    isUse: function()
    {
        this.__$target.hide();

        if (this.__$target.find('.xans-record-').length > 0) {
            return true;
        }

        return false;
    },

    restoreCache: function()
    {
        this.__aData = [];

        var iTotalCount = CAPP_ASYNC_METHODS.RecentTotalCount.getData();
        if (iTotalCount == 0) {
            // 총 갯수가 없는 경우 복구할 것이 없으므로 복구한 것으로 리턴
            return true;
        }

        var sAdultImage = '';

        if (window.sessionStorage === undefined) {
            return false;
        }

        var sSessionStorageData = window.sessionStorage.getItem(this.STORAGE_KEY);
        if (sSessionStorageData === null) {
            return false;
        }

        var iViewCount = EC_FRONT_JS_CONFIG_SHOP.recent_count;

        this.__aData = [];
        var aStorageData = $.parseJSON(sSessionStorageData);
        var iCount = 1;
        var bDispRecent = true;
        for (var iKey in aStorageData) {
            var sProductImgSrc = aStorageData[iKey].sImgSrc;

            if (isFinite(iKey) === false) {
                continue;
            }

            var aDataTmp = [];
            aDataTmp.recent_img = getImageUrl(sProductImgSrc);
            aDataTmp.name = aStorageData[iKey].sProductName;
            aDataTmp.disp_recent = true;
            aDataTmp.is_adult_product = aStorageData[iKey].isAdultProduct;
            aDataTmp.link_product_detail = aStorageData[iKey].link_product_detail;

            //aDataTmp.param = '?product_no=' + aStorageData[iKey].iProductNo + '&cate_no=' + aStorageData[iKey].iCateNum + '&display_group=' + aStorageData[iKey].iDisplayGroup;
            aDataTmp.param = filterXssUrlParameter(aStorageData[iKey].sParam);
            if ( iViewCount < iCount ) {
                bDispRecent = false;
            }
            aDataTmp.disp_recent = bDispRecent;

            iCount++;
            this.__aData.push(aDataTmp);
        }

        return true;

        /**
         * get SessionStorage image url
         * @param sNewImgUrl DB에 저장되어 있는 tiny값
         */
        function getImageUrl(sImgUrl)
        {
            if (typeof(sImgUrl) === 'undefined' || sImgUrl === null) {
                return;
            }
            var sNewImgUrl = '';

            if (sImgUrl.indexOf('http://') >= 0 || sImgUrl.indexOf('https://') >= 0 || sImgUrl.substr(0, 2) === '//') {
                sNewImgUrl = sImgUrl;
            } else {
                sNewImgUrl = EC_FRONT_JS_CONFIG_SHOP.cdnUrl + '/web/product/tiny/' + sImgUrl;
            }

            return sNewImgUrl;
        }

        /**
         * 파라미터 URL에서 XSS 공격 관련 파라미터를 필터링합니다. ECHOSTING-162977
         * @param string sParam 파라미터
         * @return string 필터링된 파라미터
         */
        function filterXssUrlParameter(sParam)
        {
            sParam = sParam || '';

            var sPrefix = '';
            if (sParam.substr(0, 1) === '?') {
                sPrefix = '?';
                sParam = sParam.substr(1);
            }

            var aParam = {};

            var aParamList = (sParam).split('&');
            $.each(aParamList, function() {
                var aMatch = this.match(/^([^=]+)=(.*)$/);
                if (aMatch) {
                    aParam[aMatch[1]] = aMatch[2];
                }
            });

            return sPrefix + $.param(aParam);
        }

    },

    setData: function(aData)
    {
        this.__aData = aData;

        // 쿠키엔 있지만 sessionStorage에 없는 데이터 복구
        if (window.sessionStorage) {

            var oNewStorageData = [];

            for ( var i = 0 ; i < aData.length ; i++) {
                if (aData[i].bNewProduct !== true) {
                    continue;
                }

                var aNewStorageData = {
                    'iProductNo': aData[i].product_no,
                    'sProductName': aData[i].name,
                    'sImgSrc': aData[i].recent_img,
                    'sParam': aData[i].param,
                    'link_product_detail': aData[i].link_product_detail
                };

                oNewStorageData.push(aNewStorageData);
            }

            if ( oNewStorageData.length > 0 ) {
                sessionStorage.setItem(this.STORAGE_KEY , JSON.stringify(oNewStorageData));
            }
        }
    },

    execute: function()
    {
        var sAdult19Warning = EC_FRONT_JS_CONFIG_SHOP.adult19Warning;

        var aData = this.__aData;

        var aNodes = this.__$target.find('.xans-record-');
        var iRecordCnt = aNodes.length;
        var iAddedElementCount = 0;

        var aNodesParent = $(aNodes[0]).parent();
        for ( var i = 0 ; i < aData.length ; i++) {
            if (!aNodes[i]) {
                $(aNodes[iRecordCnt - 1]).clone().appendTo(aNodesParent);
                iAddedElementCount++;
            }
        }

        if (iAddedElementCount > 0) {
            aNodes = this.__$target.find('.xans-record-');
        }

        if (aData.length > 0) {
            this.__$target.show();
        }

        for ( var i = 0 ; i < aData.length ; i++) {
            assignVariables(aNodes[i], aData[i]);
        }

        // 종료 카운트 지정
        if (aData.length < aNodes.length) {
            iLength = aData.length;
            deleteNode();
        }

        recentBntInit(this.__$target);

        /**
         * 패치되지 않은 노드를 제거
         */
        function deleteNode()
        {
            for ( var i = iLength ; i < aNodes.length ; i++) {
                $(aNodes[i]).remove();
            }
        }

        /**
         * oTarget 엘레먼트에 aData의 변수를 어싸인합니다.
         * @param Element oTarget 변수를 어싸인할 엘레먼트
         * @param array aData 변수 데이터
         */
        function assignVariables(oTarget, aData)
        {
            var recentImage = aData.recent_img;

            if (sAdult19Warning === 'T' && CAPP_ASYNC_METHODS.member.getMemberIsAdult() === 'F' && aData.is_adult_product === 'T') {
                    recentImage = EC_FRONT_JS_CONFIG_SHOP.adult19BaseTinyImage;
            };

            var $oTarget = $(oTarget);

            var sHtml = $oTarget.html();

            sHtml = sHtml.replace('about:blank', recentImage)
                         .replace('##param##', aData.param)
                         .replace('##name##',aData.name)
                         .replace('##link_product_detail##', aData.link_product_detail);
            $oTarget.html(sHtml);

            if (aData.disp_recent === true) {
                $oTarget.removeClass('displaynone');
            }
        }

        function recentBntInit($target)
        {
            // 화면에 뿌려진 갯수
            var iDisplayCount = 0;
            // 보여지는 style
            var sDisplay = '';
            var iIdx = 0;
            //
            var iDisplayNoneIdx = 0;

            var nodes = $target.find('.xans-record-').each(function()
            {
                sDisplay = $(this).css('display');
                if (sDisplay != 'none') {
                    iDisplayCount++;
                } else {
                    if (iDisplayNoneIdx == 0) {
                        iDisplayNoneIdx = iIdx;
                    }

                }
                iIdx++;
            });

            var iRecentCount = nodes.length;
            var bBtnActive = iDisplayCount > 0;
            $('.xans-layout-productrecent .prev').unbind('click').click(function()
            {
                if (bBtnActive !== true) return;
                var iFirstNode = iDisplayNoneIdx - iDisplayCount;
                if (iFirstNode == 0 || iDisplayCount == iRecentCount) {
                    alert(__('최근 본 첫번째 상품입니다.'));
                    return;
                } else {
                    iDisplayNoneIdx--;
                    $(nodes[iDisplayNoneIdx]).hide();
                    $(nodes[iFirstNode - 1]).removeClass('displaynone');
                    $(nodes[iFirstNode - 1]).fadeIn('fast');

                }
            }).css(
            {
                cursor : 'pointer'
            });

            $('.xans-layout-productrecent .next').unbind('click').click(function()
            {
                if (bBtnActive !== true) return;
                if ( (iRecentCount ) == iDisplayNoneIdx || iDisplayCount == iRecentCount) {
                    alert(__('최근 본 마지막 상품입니다.'));
                } else {
                    $(nodes[iDisplayNoneIdx]).fadeIn('fast');
                    $(nodes[iDisplayNoneIdx]).removeClass('displaynone');
                    $(nodes[ (iDisplayNoneIdx - iDisplayCount)]).hide();
                    iDisplayNoneIdx++;
                }
            }).css(
            {
                cursor : 'pointer'
            });

        }

    }
};

/**
 * 비동기식 데이터 - 최근본상품 총 갯수
 */
CAPP_ASYNC_METHODS.aDatasetList.push('RecentTotalCount');
CAPP_ASYNC_METHODS.RecentTotalCount = {
    __iRecentCount: null,

    __$target: CAPP_ASYNC_METHODS.$xansMyshopMain.find('.xans_myshop_main_recent_cnt'),

    isUse: function()
    {
        if (this.__$target.length > 0) {
            return true;
        }

        return false;
    },

    restoreCache: function()
    {
        var sCookieName = 'recent_plist';
        if (EC_SDE_SHOP_NUM > 1) {
            sCookieName = 'recent_plist' + EC_SDE_SHOP_NUM;
        }
        var re = new RegExp('(?:^| |;)' + sCookieName + '=([^;]+)');
        var aCookieValue = document.cookie.match(re);
        if (aCookieValue) {
            this.__iRecentCount = decodeURI(aCookieValue[1]).split('|').length;
        } else {
            this.__iRecentCount = 0;
        }
    },

    execute: function()
    {
        this.__$target.html(this.__iRecentCount);
    },

    getData: function()
    {
        if (this.__iRecentCount === null) {
            // this.isUse값이 false라서 복구되지 않았는데 이 값이 필요한 경우 복구
            this.restoreCache();
        }

        return this.__iRecentCount;
    }
};
/**
 * 비동기식 데이터 - 주문정보
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Order');
CAPP_ASYNC_METHODS.Order = {
    __iOrderCount: null,
    __iOrderTotalPrice: null,
    __iGradeIncreaseValue: null,

    __$target: $('#xans_myshop_bankbook_order_count'),
    __$target2: $('#xans_myshop_bankbook_order_price'),
    __$target3: $('#xans_myshop_bankbook_grade_increase_value'),

    isUse: function()
    {
        if (CAPP_ASYNC_METHODS.IS_LOGIN === true) {
            if (this.__$target.length > 0) {
                return true;
            }

            if (this.__$target2.length > 0) {
                return true;
            }

            if (this.__$target3.length > 0) {
                return true;
            }
        }
        
        return false;        
    },

    restoreCache: function()
    {
        var sCookieName = 'order_' + EC_SDE_SHOP_NUM;
        var re = new RegExp('(?:^| |;)' + sCookieName + '=([^;]+)');
        var aCookieValue = document.cookie.match(re);
        if (aCookieValue) {
            var aData = jQuery.parseJSON(decodeURIComponent(aCookieValue[1]));
            this.__iOrderCount = aData.total_order_count;
            this.__iOrderTotalPrice = aData.total_order_price;
            this.__iGradeIncreaseValue = Number(aData.grade_increase_value);
            return true;
        }

        return false;
    },

    setData: function(aData)
    {
        this.__iOrderCount = aData['total_order_count'];
        this.__iOrderTotalPrice = aData['total_order_price'];
        this.__iGradeIncreaseValue = Number(aData['grade_increase_value']);
    },

    execute: function()
    {
        this.__$target.html(this.__iOrderCount);
        this.__$target2.html(this.__iOrderTotalPrice);
        this.__$target3.html(this.__iGradeIncreaseValue);
    },

    getData: function()
    {
        return {
            total_order_count: this.__iOrderCount,
            total_order_price: this.__iOrderTotalPrice,
            grade_increase_value: this.__iGradeIncreaseValue
        };
    }
};
/**
 * 비동기식 데이터 - Benefit
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Benefit');
CAPP_ASYNC_METHODS.Benefit = {
    __aBenefit: null,
    __$target: $('.xans-myshop-asyncbenefit'),

    isUse: function()
    {
        if (CAPP_ASYNC_METHODS.IS_LOGIN === true) {
            if (this.__$target.length > 0) {
                return true;
            }
        }

        return false;
    },

    setData: function(aData)
    {
        this.__aBenefit = aData;
    },

    execute: function()
    {
        var aFilter = ['group_image_tag', 'group_icon_tag', 'display_no_benefit', 'display_with_all', 'display_mobile_use_dc', 'display_mobile_use_mileage'];
        var __aData = this.__aBenefit;
        
        // 그룹이미지
        $('.myshop_benefit_group_image_tag').attr({alt: __aData['group_name'], src: __aData['group_image']});

        // 그룹아이콘
        $('.myshop_benefit_group_icon_tag').attr({alt: __aData['group_name'], src: __aData['group_icon']});

        if (__aData['display_no_benefit'] === true) {
            $('.myshop_benefit_display_no_benefit').removeClass('displaynone').show();
        }
        
        if (__aData['display_with_all'] === true) {
            $('.myshop_benefit_display_with_all').removeClass('displaynone').show();
        }
        
        if (__aData['display_mobile_use_dc'] === true) {
            $('.myshop_benefit_display_mobile_use_dc').removeClass('displaynone').show();
        } 
        
        if (__aData['display_mobile_use_mileage'] === true) {
            $('.myshop_benefit_display_mobile_use_mileage').removeClass('displaynone').show();
        }

        $.each(__aData, function(key, val) {
            if ($.inArray(key, aFilter) === -1) {
                $('.myshop_benefit_' + key).html(val);
            }
        });
    }    
};
/**
 * 비동기식 데이터 - 비동기장바구니 레이어
 */
CAPP_ASYNC_METHODS.aDatasetList.push('BasketLayer');
CAPP_ASYNC_METHODS.BasketLayer = {
    __sBasketLayerHtml: null,
    __$target: $('#ec_async_basket_layer_container'),

    isUse: function()
    {
        if (this.__$target.length > 0) {
            return true;
        }
        return false;
    },

    execute: function()
    {
        $.ajax({
            url: '/order/async_basket_layer.html?__popupPage=T',
            async: false,
            success: function(data) {
                var sBasketLayerHtml = data;
                var sBasketLayerStyle = '';
                var sBasketLayerBody = '';

                sBasketLayerHtml = sBasketLayerHtml.replace(/<script([\s\S]*?)<\/script>/gi,''); // 스크립트 제거
                sBasketLayerHtml = sBasketLayerHtml.replace(/<link([\s\S]*?)\/>/gi,''); // 옵티마이져 제거

                var regexStyle = /<style([\s\S]*?)<\/style>/; // Style 추출
                if (regexStyle.exec(sBasketLayerHtml) != null) sBasketLayerStyle = regexStyle.exec(sBasketLayerHtml)[0];

                var regexBody = /<body[\s\S]*?>([\s\S]*?)<\/body>/; // Body 추출
                if (regexBody.exec(sBasketLayerHtml) != null) sBasketLayerBody = regexBody.exec(sBasketLayerHtml)[1];

                CAPP_ASYNC_METHODS.BasketLayer.__sBasketLayerHtml = sBasketLayerStyle + sBasketLayerBody;
            }
        });
        this.__$target.html(this.__sBasketLayerHtml);
    }
};
/**
 * 비동기식 데이터 - Benefit
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Grade');
CAPP_ASYNC_METHODS.Grade = {
    __aGrade: null,
    __$target: $('#sGradeAutoDisplayArea'),

    isUse: function()
    {
        if (CAPP_ASYNC_METHODS.IS_LOGIN === true) {
            if (this.__$target.length > 0) {
                return true;
            }
        }

        return false;
    },

    setData: function(aData)
    {
        this.__aGrade = aData;
    },

    execute: function()
    {
        var __aData = this.__aGrade;
        var aFilter = ['bChangeMaxTypePrice', 'bChangeMaxTypePriceAndCount', 'bChangeMaxTypePriceOrCount', 'bChangeMaxTypeCount'];

        var aMaxDisplayJson = {
            "bChangeMaxTypePrice": [
                {"sId": "sChangeMaxTypePriceArea"}
            ],
            "bChangeMaxTypePriceAndCount": [
                {"sId": "sChangeMaxTypePriceAndCountArea"}
            ],
            "bChangeMaxTypePriceOrCount": [
                {"sId": "sChangeMaxTypePriceOrCountArea"}
            ],
            "bChangeMaxTypeCount": [
                {"sId": "sChangeMaxTypeCountArea"}
            ]
        };

        if ($('.sNextGroupIconArea').length > 0) {
            if (__aData['bDisplayNextGroupIcon'] === true) {
                $('.sNextGroupIconArea').removeClass('displaynone').show();
                $('.myshop_benefit_next_group_icon_tag').attr({alt: __aData['sNextGrade'], src: __aData['sNextGroupIcon']});
            } else {
                $('.sNextGroupIconArea').addClass('displaynone');
            }
        }

        var sIsAutoGradeDisplay = "F";
        $.each(__aData, function(key, val) {
            if ($.inArray(key, aFilter) === -1) {
                return true;
            }
            if (val === true) {
                if ($('#'+aMaxDisplayJson[key][0].sId).length > 0) {
                    $('#' + aMaxDisplayJson[key][0].sId).removeClass('displaynone').show();
                }
                sIsAutoGradeDisplay = "T";
            }
        });
        if (sIsAutoGradeDisplay == "T" && $('#sGradeAutoDisplayArea .sAutoGradeDisplay').length > 0) {
            $('#sGradeAutoDisplayArea .sAutoGradeDisplay').addClass('displaynone');
        }

        $.each(__aData, function(key, val) {
            if ($.inArray(key, aFilter) === -1) {
                if ($('.xans-member-var-' + key).length > 0) {
                    $('.xans-member-var-' + key).html(val);
                }
            }
        });
    }    
};
/**
 * 비동기식 데이터 - Benefit
 */
CAPP_ASYNC_METHODS.aDatasetList.push('AutomaticGradeShow');
CAPP_ASYNC_METHODS.AutomaticGradeShow = {
    __aGrade: null,
    __$target: $('#sAutomaticGradeShowArea'),

    isUse: function()
    {
        if (CAPP_ASYNC_METHODS.IS_LOGIN === true) {
            if (this.__$target.length > 0) {
                return true;
            }
        }
        return false;
    },

    setData: function(aData)
    {
        this.__aGrade = aData;
    },

    execute: function()
    {
        var __aData = this.__aGrade;

        /**
         * 아이콘 표기 제외
        if ($('.sNextGroupIconArea').length > 0) {
            if (__aData['bDisplayNextGroupIcon'] === true) {
                $('.sNextGroupIconArea').removeClass('displaynone').show();
                $('.myshop_benefit_next_group_icon_tag').attr({alt: __aData['sNextGrade'], src: __aData['sNextGroupIcon']});
            } else {
                $('.sNextGroupIconArea').addClass('displaynone');
            }
        }
         */

        var sIsAutoGradeDisplay = "F";
        $.each(__aData, function(key, val) {
            if (val === true) {
                sIsAutoGradeDisplay = "T";
                return false;
            }
        });
        if (sIsAutoGradeDisplay == "T" && $('#sAutomaticGradeShowArea .sAutoGradeDisplay').length > 0) {
            $('#sAutomaticGradeShowArea .sAutoGradeDisplay').addClass('displaynone');
        }

        $.each(__aData, function(key, val) {
            if ($('.xans-member-var-' + key).length > 0) {
                $('.xans-member-var-' + key).html(val);
            }
        });
    }    
};
/**
 * 비동기식 데이터 - 비동기장바구니 레이어
 */
CAPP_ASYNC_METHODS.aDatasetList.push('MobileMutiPopup');
CAPP_ASYNC_METHODS.MobileMutiPopup = {
    __$target: $('div[class^="ec-async-multi-popup-layer-container"]'),

    isUse: function()
    {
        if (this.__$target.length > 0) {
            return true;
        }
        return false;
    },

    execute: function()
    {
        for (var i=0; i < this.__$target.length ; i++) {
            $.ajax({
                url: '/exec/front/popup/AjaxMultiPopup?index='+i,
                data : EC_ASYNC_MULTI_POPUP_OPTION[i],
                dataType: "json",
                success : function (oResult) {
                    switch (oResult.code) {
                        case '0000' :
                            if (oResult.data.length < 1) {
                                break;
                            }
                            $('.ec-async-multi-popup-layer-container-' + oResult.data.html_index).html(oResult.data.html_text);
                            if (oResult.data.type == 'P') {
                                BANNER_POPUP_OPEN.setPopupSetting();
                                BANNER_POPUP_OPEN.setPopupWidth();
                                BANNER_POPUP_OPEN.setPopupClose();
                            } else {
                                /**
                                 * 이중 스크롤 방지 클래스 추가(비동기) 
                                 *
                                 */
                                $('body').addClass('eMobilePopup');
                                $('body').width('100%');

                                BANNER_POPUP_OPEN.setFullPopupSetting();
                                BANNER_POPUP_OPEN.setFullPopupClose();
                            }
                            break;
                        default :
                            break;
                    }
                },
                error : function () {
                }
            });
        }
    }
};
/**
 * 비동기식 데이터 - 좋아요 상품 갯수
 */
CAPP_ASYNC_METHODS.aDatasetList.push('MyLikeProductCount');
CAPP_ASYNC_METHODS.MyLikeProductCount = {
    __iMyLikeCount: null,

    __$target: $('#xans_myshop_like_prd_cnt'),
    __$target_main: $('#xans_myshop_main_like_prd_cnt'),
    isUse: function()
    {
        if (this.__$target.length > 0 && SHOP.getLanguage() === 'ko_KR') {
            return true;
        }

        if (this.__$target_main.length > 0 && SHOP.getLanguage() === 'ko_KR') {
            return true;
        }

        return false;
    },
    restoreCache: function()
    {
        var sCookieName = 'like_product_cnt' + EC_SDE_SHOP_NUM;
        var re = new RegExp('(?:^| |;)' + sCookieName + '=([^;]+)');
        var aCookieValue = document.cookie.match(re);
        if (aCookieValue) {
            this.__iMyLikeCount = parseInt(aCookieValue[1], 10);
            return true;
        }

        return false;
    },

    setData: function(sData)
    {
        this.__iMyLikeCount = Number(sData);
    },

    execute: function()
    {
        if (SHOP.getLanguage() === 'ko_KR') {
            this.__$target.html(this.__iMyLikeCount + '개');
            this.__$target_main.html(this.__iMyLikeCount);
        }
    }
};
/**
 * 라이브 링콘 on/off이미지
 */
CAPP_ASYNC_METHODS.aDatasetList.push('Livelinkon');
CAPP_ASYNC_METHODS.Livelinkon = {
    __$target: $('#ec_livelinkon_campain_on'),
    __$target2: $('#ec_livelinkon_campain_off'),

    isUse: function()
    {
        if (this.__$target.length > 0 && this.__$target2.length > 0) {
            return true;
        }
        return false;
    },

    execute: function()
    {
        var sCampaignid = '';
        if (EC_ASYNC_LIVELINKON_ID != undefined) {
            sCampaignid = EC_ASYNC_LIVELINKON_ID
        }
        $.ajax({
            url: '/exec/front/Livelinkon/Campaignajax?campaign_id='+sCampaignid,
            async: false,
            success: function(data) {
                if (data == 'on') {
                    CAPP_ASYNC_METHODS.Livelinkon.__$target.removeClass('displaynone').show();
                    CAPP_ASYNC_METHODS.Livelinkon.__$target2.removeClass('displaynone').hide();
                } else if (data == 'off') {
                    CAPP_ASYNC_METHODS.Livelinkon.__$target.removeClass('displaynone').hide();
                    CAPP_ASYNC_METHODS.Livelinkon.__$target2.removeClass('displaynone').show();
                } else {
                    CAPP_ASYNC_METHODS.Livelinkon.__$target.removeClass('displaynone').hide();
                    CAPP_ASYNC_METHODS.Livelinkon.__$target2.removeClass('displaynone').hide();
                }
            }
        });
    }
};
/**
 * 비동기식 데이터 - 마이쇼핑 > 주문 카운트 (주문 건수 / CS건수 / 예전주문)
 */
CAPP_ASYNC_METHODS.aDatasetList.push('OrderHistoryCount');
CAPP_ASYNC_METHODS.OrderHistoryCount = {
    __sTotalOrder: null,
    __sTotalOrderCs: null,
    __sTotalOrderOld: null,

    __$target: $('#ec_myshop_total_orders'),
    __$target2: $('#ec_myshop_total_orders_cs'),
    __$target3: $('#ec_myshop_total_orders_old'),

    isUse: function()
    {
        if (CAPP_ASYNC_METHODS.IS_LOGIN === true) {
            if (this.__$target.length > 0) {
                return true;
            }

            if (this.__$target2.length > 0) {
                return true;
            }

            if (this.__$target3.length > 0) {
                return true;
            }
        }

        return false;
    },

    setData: function(aData)
    {
        this.__sTotalOrder = aData['total_orders'];
        this.__sTotalOrderCs = aData['total_orders_cs'];
        this.__sTotalOrderOld = aData['total_orders_old'];

    },

    execute: function()
    {
        this.__$target.html(this.__sTotalOrder);
        this.__$target2.html(this.__sTotalOrderCs);
        this.__$target3.html(this.__sTotalOrderOld);
    }
};
/**
 * 주문조회 > 주문내역조회 및 취소/교환/반품내역 등 탭(OrderHistoryTab) 갯수 비동기호출
 */
CAPP_ASYNC_METHODS.aDatasetList.push('OrderHistoryTab');
CAPP_ASYNC_METHODS.OrderHistoryTab = {
    __$targetTotalOrders: $('#xans_myshop_total_orders'),
    __$targetTotalOrdersCs: $('#xans_myshop_total_orders_cs'),
    __$targetTotalOrdersPast: $('#xans_myshop_total_orders_past'),
    __$targetTotalOrdersOld: $('#xans_myshop_total_orders_old'),

    isUse: function()
    {
        if (CAPP_ASYNC_METHODS.IS_LOGIN === true) {
            if ($('.xans-myshop-orderhistorytab').length > 0) {
                return true;
            }
        }
        return false;
    },
    execute: function()
    {
        try {
            var mode = this.getUrlParam('mode');
            var order_id = this.getUrlParam('order_id');
            var order_status = this.getUrlParam('order_status');
            var history_start_date = this.getUrlParam('history_start_date');
            var history_end_date = this.getUrlParam('history_end_date');
            var past_year = this.getUrlParam('past_year');
            var count = this.getUrlParam('count');

            var sPathName = window.location.pathname;

            var oParameters = {
                'mode': mode == null ? '' : mode,
                'order_id': order_id == null ? '' : order_id,
                'order_status': order_status == null ? '' : order_status,
                'history_start_date': history_start_date == null ? '' : history_start_date,
                'history_end_date': history_end_date == null ? '' : history_end_date,
                'past_year': past_year == null ? '' : past_year,
                'count': count == null ? '' : count,
                'page_name': sPathName.substring(sPathName.lastIndexOf("/") + 1, sPathName.indexOf('.'))
            }

            if (typeof EC_ASYNC_ORDERHISTORYTAB_ORDER_ID !== 'undefined') {
                oParameters['encrypted_str'] = EC_ASYNC_ORDERHISTORYTAB_ORDER_ID;
            }

            var oThis = this;

            $.ajax({
                url: '/exec/front/Myshop/OrderHistoryTab',
                dataType: 'json',
                data: oParameters,
                success: function (aData) {
                    if (aData['result'] === true) {
                        oThis.__$targetTotalOrders.html(aData['total_orders']);
                        oThis.__$targetTotalOrdersCs.html(aData['total_orders_cs']);
                        oThis.__$targetTotalOrdersOld.html(aData['total_orders_old']);
                        oThis.__$targetTotalOrdersPast.html(aData['total_orders_past']);

                        var oTabATagList = {
                            'param' : $('.tab_class a'),
                            'param_cs' : $('.tab_class_cs a'),
                            'param_past' : $('.tab_class_past a'),
                            'param_old' : $('.tab_class_old a'),
                        };
                        var sHref;
                        $.each(oTabATagList, function(sKey, oTarget) {
                            if (oTarget.length > 0) {
                                sHref = oTarget.attr("href");
                                sHref = sHref.replace("$" + sKey, aData[sKey]);
                                oTarget.attr("href", sHref);
                            }
                        });

                        $("." + aData['selected_tab_class']).addClass('selected');

                        if (aData['is_past_list_display'] === false) {
                            $('.tab_class_past').addClass("displaynone");
                        } else {
                            $('.tab_class_past').removeClass("displaynone");
                        }

                        if (aData['old_list_display'] === false) {
                            $('.tab_class_old').addClass("displaynone");
                        } else {
                            $('.tab_class_old').removeClass("displaynone");
                        }
                    }
                }
            });
        } catch (oError) {
            this.errorAjaxCall(oError)
        }
    },
    getUrlParam : function(name)
    {
        var param = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
        if (param == null) {
            return null;
        } else {
            return decodeURI(param[1]) || null;
        }
    },
    errorAjaxCall : function(oError)
    {
        var sError = oError.toString();
        var aMatch = sError.match(/Error*/g);

        if ( typeof(oError) !== 'object' || aMatch == null || aMatch.length < 1 || !oError.stack ) return;

        $.ajax({
            url: '/exec/front/order/FormJserror/',
            method: 'POST',
            cache: false,
            async : false,
            data: {
                errorMessage : oError.message,
                errorStack : oError.stack,
                errorName : oError.name
            }
        });
    }
};
var PathRoleValidator = (function() {
    /**
     * Milage, Deposit 의 경우 처리되지 말아야할 페이지 확인
     * @returns {boolean}
     */
    function isInvalidPathRole()
    {
        // path role
        var sCurrentPathRole = null;

        // // euckr 환경에서 path role 획득
        if (SHOP.getProductVer() === 1) {
            // path 와 role 매핑
            var aPathRoleMap = {
                '/myshop/index.html': 'MYSHOP_MAIN',
                '/myshop/mileage/historyList.html': 'MYSHOP_MILEAGE_LIST',
                '/myshop/deposits/historyList.html': 'MYSHOP_DEPOSIT_LIST',
                '/order/orderform.html': 'ORDER_ORDERFORM'
            };

            // 페이지 경로로부터 path role 획득
            sCurrentPathRole = aPathRoleMap[document.location.pathname];

            // utf8 환경에서 path role 획득
        } else {
            // 현재 페이지 path role 획득
            sCurrentPathRole = $('meta[name="path_role"]').attr('content');
        }

        // 처리되면 안되는 경로
        var aInvalidPathRole = [
            'MYSHOP_MAIN',
            'MYSHOP_MILEAGE_LIST',
            'MYSHOP_DEPOSIT_LIST',
            'ORDER_ORDERFORM'
        ];

        return $.inArray(sCurrentPathRole, aInvalidPathRole) >= 0;
    }

    return {
        isInvalidPathRole: isInvalidPathRole
    };
})();
$(document).ready(function()
{
	CAPP_ASYNC_METHODS.init();
});
