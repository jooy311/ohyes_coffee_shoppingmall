package ohyes.coffee.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import ohyes.coffee.dto.QnaDTO;

public class QnaBoardDAO extends JdbcDAO{
	private static QnaBoardDAO _dao;
	
	private QnaBoardDAO() {
		// TODO Auto-generated constructor stub
	}
	
	static {
		_dao=new QnaBoardDAO();
	}
	
	public static QnaBoardDAO getDAO() {
		return _dao;
	}
	
	//BOARD 테이블에 저장된 게시글의 갯수를 검색하여 반환하는 메소드
	// => 검색 기능을 제공하기 위해 매개변수에 검색 관련 정보를 전달받아 저장
	//public int selectBoardCount() {
	public int selectBoardCount(String search, String keyword) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int count=0;
		
		try {
			con=getConnection();
			
			//메소드의 매개변수의 저장값에 따라 다른 SQL 명령을 저장
			//하여 실행되도록 설정 - 동적 SQL
			if(keyword.equals("")) {//검색 기능을 사용하지 않은 경우
				String sql="select count(*) from QNA";
				pstmt=con.prepareStatement(sql);
			} else {//검색 기능을 사용한 경우
				String sql="select count(*) from QNA where "
						+search+" like '%'||?||'%'";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
			}
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				count=rs.getInt(1);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectBoardCount() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return count;
	}
	
	//게시글의 시작 행번호와 종료 행번호를 전달받아 BOARD 테이블에 저장된 
	//게시글에서 시작과 종료 범위에 포함된 게시글만 검색하여 반환하는 메소드
	//public List<BoardDTO> selectBoard(int startRow, int endRow) {
	public List<QnaDTO> selectBoard(int startRow, int endRow, String search, String keyword, int category) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<QnaDTO> boardList=new ArrayList<QnaDTO>();
		try {
			con=getConnection();
			
			if(keyword.equals("")) {
				if (category==0) {
					
				String sql="select * from (select rownum rn,temp.* from ("
					+ "select * from QNA order by qna_no desc)"
					+ " temp) where rn between ? and ?";
				pstmt=con.prepareStatement(sql);
				pstmt.setInt(1, startRow);
				pstmt.setInt(2, endRow);
				}else {
					String sql="select * from (select rownum rn,temp.* from ("
							+ "select * from QNA order by qna_no desc)"
							+ " temp) where qna_code=? and rn between ? and ?";
						pstmt=con.prepareStatement(sql);
						pstmt.setInt(1, category);
						pstmt.setInt(2, startRow);
						pstmt.setInt(3, endRow);
				}
				
			}else {
				String sql="select * from (select rownum rn,temp.* from ("
						+ "select * from qna where "+search
						+" like '%'||?||'%' and qna_status!=2 order by qna_no"
						+ ") temp) where rn between ? and ?";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
				pstmt.setInt(2, startRow);
				pstmt.setInt(3, endRow);
			}
			rs=pstmt.executeQuery();
			while(rs.next()) {
				QnaDTO board=new QnaDTO();
				board.setQnaNo(rs.getInt("qna_no"));
				board.setQnaTitle(rs.getString("qna_title"));
				board.setQnaMemId(rs.getString("qna_mem_id"));
				board.setQnaContents(rs.getString("qna_contents"));
				board.setQnaDate(rs.getString("qna_date"));
				board.setQnaReadcount(rs.getInt("qna_readcount"));
				board.setQnaStatus(rs.getInt("qna_status"));
				board.setQnaCode(rs.getInt("qna_code"));
				if (board.getQnaStatus()==0 || board.getQnaStatus()==1) {
					boardList.add(board);
				}
				
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectBoard() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return boardList;
	}

	
	//BOARD_SEQ 시퀸스 객체의 다음값을 검색하여 반환하는 메소드
	public int selectNextNum() {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int nextNum=0;
		try {
			con=getConnection();
			
			String sql="select qna_seq.nextval from dual";
			pstmt=con.prepareStatement(sql);
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				nextNum=rs.getInt(1);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectNextNum() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		} 
		return nextNum;
	}
	
	//게시글을 전달받아 BOARD 테이블에 삽입하고 삽입행의 갯수를 반환하는 메소드
	public int insertBoard(QnaDTO board) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		try {
			con=getConnection();
			
			String sql="insert into qna values(?,?,?,?,sysdate,0,0,?)";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, board.getQnaNo());
			pstmt.setString(2, board.getQnaTitle());
			pstmt.setString(3, board.getQnaMemId());
			pstmt.setString(4, board.getQnaContents());
			pstmt.setInt(5, board.getQnaCode());
			
			rows=pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]insertBoard() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	
	//게시글 번호를 전달받아 BOARD 테이블에 저장된 게시글을 검색하여 반환하는 메소드
	public QnaDTO selectNumBoard(int num) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		QnaDTO board=null;
		try {
			con=getConnection();
			
			String sql="select * from qna where qna_no=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, num);
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				board=new QnaDTO();
				board.setQnaNo(rs.getInt("qna_no"));
				board.setQnaTitle(rs.getString("qna_title"));
				board.setQnaMemId(rs.getString("qna_mem_id"));
				board.setQnaContents(rs.getString("qna_contents"));
				board.setQnaDate(rs.getString("qna_date"));
				board.setQnaReadcount(rs.getInt("qna_readcount"));
				board.setQnaStatus(rs.getInt("qna_status"));
				board.setQnaCode(rs.getInt("qna_code"));
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectNumBoard() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return board;
	}
	
	//게시글번호를 전달받아 BOARD 테이블에 저장된 해당 게시글의 조회수를
	//1 증가되도록 변경하고 변경행의 갯수를 반환하는 메소드
	public int updateReadCount(int num) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		try {
			con=getConnection();
			
			String sql="update qna set qna_readcount=qna_readcount+1 where qna_no=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, num);
			
			rows=pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]updateReadCount() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt); 
		}
		return rows;
	}
	
	//게시글번호를 전달받아 BOARD 테이블에 저장된 해당 게시글을 삭제 
	//처리하고 처리 행의 갯수를 반환하는 메소드 
	// => 게시글의 상태 컬럼값을 삭제 상태(9)로 변경
	public int deleteBoard(int num) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		try {
			con=getConnection();
			
			String sql="update qna set qna-status=0 where qna_no=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, num);
			
			rows=pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]deleteBoard() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt); 
		}
		return rows;
	}
	
	//게시글을 전달받아 BOARD 테이블에 저장된 해당 게시글을 변경하고
	//변경행의 갯수를 반환하는 메소드
	public int updateBoard(QnaDTO board) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		try {
			con=getConnection();
			
			String sql="update qna set qna_title=?,qna_contents=?,qna_code=? where qna_no=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, board.getQnaTitle());
			pstmt.setString(2, board.getQnaContents());
			pstmt.setInt(3, board.getQnaCode());
			pstmt.setInt(4, board.getQnaNo());
			
			rows=pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]modifyBoard() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt); 
		}
		return rows;
	}
	//글삭제시 글의 상태 변경
	public int updateStatus(int qnaNo) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		try {
			con=getConnection();

			String sql="update qna set QNA_STATUS=2 where QNA_NO =?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, qnaNo);
			
			rows=pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]updateStatus() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
}

	

