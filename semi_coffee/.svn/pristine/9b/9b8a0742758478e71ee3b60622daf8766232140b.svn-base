package ohyes.coffee.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import ohyes.coffee.dto.ReviewDTO;

public class ReviewDAO extends JdbcDAO{
	private static ReviewDAO _dao;
	
	public ReviewDAO() {
		// TODO Auto-generated constructor stub
	}

	static {
		_dao=new ReviewDAO();
	}
	
	public static ReviewDAO getDAO() {
		return _dao;
	}
	
	//REVIEW 테이블에 저장된 게시글의 갯수를 검색하여 반환하는 메소드
	// => 검색 기능을 제공하기 위해 매개변수에 검색 관련 정보를 전달받아 저장
	public int selectReviewCount(String search, String keyword) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int count=0;
		try {
			con=getConnection();
			
			if (keyword.equals("")) {//검색 기능을 사용하지 않은 경우
				String sql="select count(*) from review";
				pstmt=con.prepareStatement(sql);
			} else {
				String sql="select count(*) from review where "+search+" like '%'||?||'%'";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
			}
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				count=rs.getInt(1);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectReviewCount() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return count;
	}
	
	//게시글의 시작행번호와 종료행 번호를 전달받아 테이블에 저장된 게시글에서 시작 종료 범위의 게시글만 검색하여 반환하는메소드
	public List<ReviewDTO> selectReview(int startRow, int endRow, String search, String keyword, int category){
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<ReviewDTO> reviewList=new ArrayList<ReviewDTO>();
		try {
			con=getConnection();
			
			if(keyword.equals("")) {
				if(category==0) {
					String sql="select * from (select rownum rn,temp.* from (select * from review order by review_no) temp) "
							+ " where rn between ? and ?";
					pstmt=con.prepareStatement(sql);
					pstmt.setInt(1, startRow);
					pstmt.setInt(2, endRow);
				} else {
					String sql="select * from (select rownum rn,temp.* from (select * from review where "
							+ "review_p_no=(select p_no from product where pcategory_code=?) order by review_no) temp) "
							+ "where rn between ? and ?";
					pstmt=con.prepareStatement(sql);
					pstmt.setInt(1, category);
					pstmt.setInt(2, startRow);
					pstmt.setInt(3, endRow);
				}
			} else {
				if(category==0) {
					String sql="select * from (select rownum rn,temp.* from (select * from review where "+search
							+ " like '%'||?||'%' and review_status!=0 order by review_no) temp) where rn between ? and ?";
					pstmt=con.prepareStatement(sql);
					pstmt.setString(1, keyword);
					pstmt.setInt(2, startRow);
					pstmt.setInt(3, endRow);
				} else {
					String sql="select * from (select rownum rn,temp.* from (select * from review where "
							+ "review_p_no=(select p_no from product where pcategory_code=?) and "+search
							+ " like '%'||?||'%' and review_status!=0 order by review_no) temp) where rn between ? and ?";
					pstmt=con.prepareStatement(sql);
					pstmt.setInt(1, category);
					pstmt.setString(2, keyword);
					pstmt.setInt(3, startRow);
					pstmt.setInt(4, endRow);					
				}
			}
			
			rs=pstmt.executeQuery();
			
			while(rs.next()) {
				ReviewDTO review=new ReviewDTO();
				review.setReviewNo(rs.getInt("review_no"));
				review.setReviewPNo(rs.getString("review_p_no"));
				review.setReviewTitle(rs.getString("review_title"));
				review.setReviewMemid(rs.getString("review_memid"));
				review.setReviewContent(rs.getString("review_content"));
				review.setReviewDate(rs.getString("review_date"));
				review.setReviewReadcount(rs.getInt("review_readcount"));
				review.setReviewStatus(rs.getInt("review_status"));
				reviewList.add(review);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectReview() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return reviewList;
	}
	
	//시퀀스 객체의 다음값 검색하여 반환
	public int selectNextNum() {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int nextNum=0;
		try {
			con=getConnection();
			String sql="select review_seq.nextval from review";
			pstmt=con.prepareStatement(sql);
			rs=pstmt.executeQuery();
			
			while (rs.next()){
				nextNum=rs.getInt(1);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectNextNum() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return nextNum;
	}
	
	//게시글을 전달받아 review 테이블에 삽입하고 삽입행의 갯수 반환
	public int insertReview(ReviewDTO review) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		
		try {
			con=getConnection();
			String sql="insert into review values(?,?,?,?,?,sysdate,0,?)";
			
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, review.getReviewNo());
			pstmt.setString(2, review.getReviewPNo());
			pstmt.setString(3, review.getReviewTitle());
			pstmt.setString(4, review.getReviewMemid());
			pstmt.setString(5, review.getReviewContent());
			pstmt.setInt(6, review.getReviewNo());
		} catch (SQLException e) {
			System.out.println("[에러]insertReview() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	//게시글 번호를 전달받아 review 테이블에 저장된 게시글을 검색하여 반환
	public ReviewDTO selectNumReview(int num) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		ReviewDTO review=null;
		
		try {
			con=getConnection();
			
			String sql="select * from review where no=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, num);
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				review=new ReviewDTO();
				review.setReviewNo(rs.getInt("review_no"));
				review.setReviewPNo(rs.getString("review_p_no"));
				review.setReviewTitle(rs.getString("review_title"));
				review.setReviewMemid(rs.getString("review_memid"));
				review.setReviewContent(rs.getString("review_content"));
				review.setReviewDate(rs.getString("review_date"));
				review.setReviewReadcount(rs.getInt("review_readcount"));
				review.setReviewStatus(rs.getInt("review_status"));
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectNumReview() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return review;
	}
	
	//게시글번호를 전달받아 review 테이블에 저장된 해당 게시글의 조회수를 1 증가되도록 변경하고 변경행의 갯수를 반환하는 메소드
	public int updateReadCount(int num) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		try {
			con=getConnection();
			
			String sql="update review set review_readcount=review_readcount+1 where review_no=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, num);
			
			rows=pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]updateReadCount() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt); 
		}
		return rows;
	}
	
	//게시글 번호를 전달받아 review 테이블에 저장된 해당 게시글을 삭제 처리하고 처리행의 갯수를 반환하는 메소드 => 삭제상태를 9로변경
	public int deleteReview(int num) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		try {
			con=getConnection();
			
			String sql="update review set review_status where no=num";
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, num);
			
			rows=pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]deleteReview() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	//게시글을 전달받아 BOARD 테이블에 저장된 해당 게시글을 변경하고 변경행의 갯수를 반환하는 메소드
	public int updateReview(ReviewDTO review) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		try {
			con=getConnection();
			
			String sql="update review set review_title=?, review_content=?, review_date=? where no=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, review.getReviewTitle());
			pstmt.setString(2, review.getReviewContent());
			pstmt.setInt(3, review.getReviewNo());
			
			rows=pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]updateReview() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
}
